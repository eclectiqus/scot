REVL - Read Eval Visualize Loop

This turtorial is a step-by-step introduction to how to use the REVL
interactive data exploration tool included with SCOT. 

* Introduction - what is REVL?
  REVL is a tool that gives you a lightweight, very flexible way to
  access and work with the raw data behind SCOT. With REVL, you can
  pull, combine, and filter data in any way you need so that you can
  get just what you want to see with minimal fuss.

  It includes the ability to throw your data into a variety of
  general-purpose visualizations as well, for cases when you're more
  interested in trends and global properties over a large collection
  of items.

  Using REVL, it's relatively easy to do things like:
  * Get a histogram of all of the email addresses that have been
    referenced over some time period
  * Select a subset of events based on any arbitrary criteria, and
    analyze them as a group
  * Filter down alerts to some interesting set, then look at their
    timing on a variety of charts, or use them as the source data for
    a more extensive query (i.e. find all of the entities referenced
    by any event from any alert in this set, and group them by type)
  * Lots of other stuff

  
  If you find yourself wishing that you could get other data from SCOT
  to look at along with something you're currently viewing, you can
  probably do it with REVL.

  REVL also has the ability to query multiple servers, provided that
  you have a proxy set up to do the forwarding (browsers won't allow
  it otherwise). I'll show how to set up apache to do this later in
  the tutorial. One example of a use case for this would be to add in
  API access to DNS digging services, NWIS, and various other
  corporate databases as the need arises. Data from these can then be
  queried and combined with other data from SCOT to give you the view
  you want.

* References
  As you use REVL, there are a couple of things you'll probably want
  to keep handy for reference. Here are links that might be useful:

  * [[http://coffeescript.org][CoffeeScript]] is the language used on the command line in REVL to
    let you manipulate data. It's a very terse language, which lends
    itself to this use but unfortunately makes it a little obtuse-
    looking.
  * [[Task Guide]] (see end of tutorial) - this is a quick reference to
    give you ideas for how to approach typical problems when playing
    with data. The format is "If you want to X, use Y, like this."
  * REVL online help: REVL has a built-in help system to make it
    easier to explore the tool and find what you need. Type 'help' at
    the prompt to see the top-level listing of commands. Type 'help'
    followed by a command name to see help specific to that command,
    as well as at least one (usually non-trivial) example of how to
    use it.

* Getting Started
  When you open REVL, you'll see a blank screen with a command line at
  the bottom. Clicking in the command line area will allow you to type
  commands, which is the main way you will interact with it.

  At its core, REVL is intended to be strongly similar to the UNIX
  command line system. It has a bunch of simple operations that can be
  chained together to create complex data flows. In REVL, the basic
  unit of data going through the command pipeline is a Javascript
  object (or array) instead of plain text as it is in UNIX. Also, many
  of the commands are set up to let you define some small, arbitrary
  behavior that happens as the data flows through. For example, the
  map command lets you define a function that takes input from the
  previous piped value, runs on that value, and returns a new value
  that will be passed on to the next item. Here's an example of map:

#+Begin_src javascript
  $ [1,2,3] \ map (n)->n*n
  [1,4,9]
#+end_src

  In that example, the value ~[1,2,3]~ (a coffeescript array) was
  passed to the map command using the pipe operator (the backslash
  character), which then ran the function defined by ~(n)->n*n~ on
  each element of the array, returning a new array of the results. The
  backslash (~\~) character is used for pipes instead of the more
  typical pipe (~|~) character because of problems parsing
  coffeescript expressions. The notation for the function is from
  coffeescript; just place the arguments to the function in the
  parentheses, then the arrow operator, then the value you want to
  compute. The last value computed in the function is the return
  value.

* Coffeescript Crash Course
  Since coffeescript is the underlying interpreter language in REVL, a
  quick overview of how it works might be handy. If you're already
  passable with coffeescript, skip this section.
  
  Coffeescript is a stripped down language syntax that compiles to
  javascript using a library loaded in the browser when you load
  REVL. Its syntax is very terse and expressive, which makes it fast
  to use but sometimes a bit opaque at the start. Here's a rundown of
  the most common features you'll want to use:

  * Objects: ~a:1,b:2,c:3~ makes the javascript object with keys
    'a','b',and 'c', with values 1, 2, and 3 respectively. You don't
    need to put the curly braces around it, although it is allowed and
    sometimes helps with nested objects to make sure you're getting
    what you intended.
  * Arrays: ~[1,2,3]~ works just like javascript.
  * Functions: ~(a,b,c)->a*b+c~ Functions are written as a
    comma-separated argument list followed by an arrow, followed by an
    expression. If you want more than one statement in the expression,
    separate them with semicolons and wrap the whole works in
    braces, like this: ~(a,b)->{console.log a; b*b}~. 
  * Calling functions: ~foo a,b,c~ Don't put parentheses around
    argument lists to functions. This can lead to ambiguous
    expressions, which can be a real headache to sort out when you're
    getting a weird result: ~foo bar a, b~ could be either ~foo (bar
    a), b~, or ~foo (bar a,b)~. In practice, it defaults to the latter
    (function calls are right-associative).
  * Ranges: ~[1..5]~ = ~[1,2,3,4,5]~, and ~[1...5]~ = ~[1,2,3,4]~
  * Slices: ~foo[1..3]~ would return the array consisting of
    ~[foo[1],foo[2],foo[3]]~
  * Comprehensions: ~[a*a for a in [1..5]]~ You can compute a new array
    out of an old one using this syntax. The result of that expression
    is ~[1,4,9,16,25]~
  * Iterating object keys: ~for own k,v of object~ This will return
    all of the key, value pairs from ~object~ that are directly part
    of ~object~ (i.e. it calls ~object.hasOwnProperty(k)~ for you).
    /Note the use of *of* instead of *in*!/.
  * Destructuring bind (array): ~[a,b,c...] = [1..5]~ would set ~a=1~, ~b=2~,
    ~c=[3,4,5]~ in the local scope (i.e. in a function body). You can
    use this to break apart a data structure easily.
  * Destructuring bind (object): ~{foo,bar} = someobject~ would take the
    ~foo~ and ~bar~ members of ~someobject~ and give them those names
    in the local scope. Other fields would be ignored, and if one of
    those keys is absent, then the variable will be undefined.
  
* An example
  I learn best by example. Enough talk, let's fight!
** Getting alerts
#+begin_src javascript
   $ alert sort:{id:-1},limit:1,columns:['id']
   [{id: 40793846}]
#+end_src
   * ~alert~ - This command exposes the SCOT API's access to the alert
     data type.
   * ~sort:{id:-1},limit:1,columns:['id']~ - This is a coffeescript
     object with three fields:
     * ~sort:{id:-1}~ - Sort results by id in reverse
     * ~limit: 1~ - Return only one result
     * ~columns: ['id']~ - Return data only from the ~id~ column. You
       can give any number of column names here, it's a coffeescript
       array of strings.
   * ~[{id: 40793846}]~ - This is the value returned by the
     command. Yours is probably different. Note that it's a list of
     objects (if we hadn't put the ~limit:1~ it would have had 50, the
     current default limit).

   
   The point of that command was to see what the largest id number
   was, so that we can "randomly" sample from the entire space of
   alerts by skipping ids.

#+begin_src javascript 
   $ [0..50] \ (n)->n*(Math.floor (40793846/50))
   [0, 815876, 1631752, ...omitted...,  39162048, 39977924, 40793800]
#+end_src
   
   * ~[0..50]~ - This makes an array of 51 integers, starting with
     zero and ending with 50.
   * ~\~ - The backslash is the pipe command, it says to send the
     output from the last part into the input of the next part.
   * ~(n)->n*(Math.floor (40793846/50))~ - this is a coffeescript
     function that takes one arguemnt (~n~) and scales it to fit in
     the range ~0..40793846~. ~Math.floor~ is part of javascript - you
     can use any standard javascript functions from your pipeline
     handlers.
   * ~[0, 815876, 1631752, ...omitted..., 39162048, 39977924,
     40793800]~ - The return value is a new array of 51 integers, this
     time in the range ~0..40793800~ inclusive. The function we gave
     was called on each array element, and its return value was put
     into this array.

   
   This part used a pipe and the ~map~ command, which is so common
   that you don't even have to type the 'map' part. If you want to
   transform a collection of things into a different collection of
   things, where each new thing is the result of some expression of
   the old thing, use map.

   We now have a list of alert ids to try to fetch to get our
   statistics from:

#+begin_src javascript 
   $ [0..50] \ (n)->n*(Math.floor (40793846/50)) \ (id_num)->API.alert id:id_num
   [__defaultfailure: <internal>,__defaultsuccess:<internal... gobbledygook...] 
#+end_src

   * ~... \ (id_num)->API.alert id:id_num~ - Pipe the result of the
     previous command (returned a list of ids to use, remember?) into
     this new function. This calls the SCOT alert API function for
     each id in the list, returning a new list of...
   * ~[...gobbledygook...]~ - Promises! Fetching stuff is
     asynchronous, which means that you have to wait a bit before it
     shows up. 

   Since you can stash promises within data structures at arbitrary
   locations, I provide a command called ~wait~ that will scan through
   a data structure and wait on all of the promises it finds,
   returning the complete data structure when all promises have been
   fulfilled. Let's do that:

#+begin_src javascript 
   $ [0..50] \ (n)->n*(Math.floor (40793846/50)) \ (id_num)->API.alert id:id_num \ wait
   [object]
#+end_src

   It turns out that, at least in my copy of the data, the alert ids
   are sparse. There are large runs where there are no values for a
   given id, so our scheme of just selecting from the range of
   ~[0..max_id]~ is doomed. When you see [object] as the return value,
   it usually means something went wrong on the server trying to fetch
   data for you. REVL tries to give useful error messages, but not
   everything is caught perfectly yet.

   Let's investigate what the deal is here:

#+begin_src javascript
   $ Http.asyncjson "GET","/scot/api/v2/alert?limit=1&columns='id'" \ wait
   {queryRecordCount: 1, records: [{}], totalRecordCount: 3100578}
#+end_src

   Since there isn't currently a built-in way to get a record count
   for a collection, we cheated. The low-level Http commands in REVL
   are accessible via the Http module. Since SCOT reports the total
   number of documents that /could/ be returned by a query in
   ~totalRecordCount~, I just queried the API directly to see that
   number. Now we know that there are 3100578 documents in the alert
   collection, which is far less than would be indicated by the
   40793846 in the largest id! Now we can go back to our "random"
   sampling:

#+begin_src javascript
   $ [0..50] \ (n)->n*(Math.floor (3100578/50)) \ (ofs)->API.alert offset:ofs,limit:1 \ wait
   [... list of alerts ...]
#+end_src

   This is basically the same as before, except instead of using the
   ~id~ column, we're just telling SCOT to skip elements using the
   ~offset~ field in the request structure.

   That command took a while to run on my connection, so I'm going to
   do it again and save the result this time so I can refer to it
   later:
#+begin_src javascript
   $ [0..50] \ (n)->n*(Math.floor (3100578/50)) \ (ofs)->API.alert offset:ofs,limit:1 \ wait \ store alerts
   [... list of alerts ...]
#+end_src
   * ~... \ store alerts~ - This creates a variable called ~alerts~ in
     the command line global scope that has the returned data in
     it. We can now just refer to that variable when we want to see
     the alerts in question, instead of having to hit the server
     again.


   ~store~ also puts the data into your browser's local storage, so
   you will still have access to it after a browser restart. If you
   want to get rid of it, use the ~clear~ command.

** Doing something with our alerts
   We now have an easy way to get a bunch of alerts (and we could
   parameterize it to get any size sample we want, more on that
   later). What to do with them?
   
   For starters, let's get a quick view of the frequency of each type
   of alert. For this, we'll use the 

* Command Reference

  * map
  * filter
  * fold
  * tolist
  * tostruct
  * into
  * group

  
  There's one other thing that you'll probably want to use
  frequently - for all commands, the ~_~ is bound to the data that
  came in on the pipeline, both in the function body when there is
  one, and on the command line itself. This lets you reference the
  data as a whole while you are processing an individual element,
  which is handy at certain times.

  Here's a detailed explanation of the top commands in REVL:
** map
*** TL;DR
    Apply a function to each element of an array or object. Provide
    the index or the key as the second argument (you can ignore this
    if you don't need it).

*** Details
   This is by far the most commonly used command. Its purpose is to
   allow you to do /something/ to each item in a list or object, then
   reassemble the new items into the same structure as before and pass
   it on. An example will help:

#+Begin_src javascript
  $ [1..5] \ (n,i)->n*i
  [0,2,6,12,20]
#+End_src

   That example uses a couple of refinements: First, ~map~ is so
   common that it's the default if no other command name is
   specified. All you do is pipe the data to a function, and map will
   be called automatically. In this case, we create an array
   ~[1,2,3,4,5]~, and send it to a function that takes a value and the
   index of that value and multiplies them together. So, the first
   time the function is called, it will have ~(1,0)~ as its arguments,
   and its result will be ~0~. The result from each call of the
   function is appended to a new array, and that array is then passed
   on to the next stage of the pipeline.

** filter 
*** TL;DR
    Apply a function to each element, only the ones that return a
    non-false result are passed on to the next stage.

*** Details
    Filter lets you determine who /shall not pass/ through the pipe:

#+begin_src javascript
  $ ['frodo','sam','balrog'] \ filter (name)->name != 'balrog'
  ['frodo','sam']
#+end_src

    The only requirement for the function passed to filter is that it
    return false (or zero, or undefined, or null) for things that
    should be dropped from the pipeline.

    Sometimes the query API for the data just isn't expressive enough
    to get exactly what you want, and in those cases filter can come
    to the rescue because you can run /any/ test on it that you can
    code up. You can test values against some other stored data as
    well to see if they're known or unknown, or to get details about
    them to make the decision.

  
