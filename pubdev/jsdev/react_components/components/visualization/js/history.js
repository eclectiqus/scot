// Generated by CoffeeScript 1.11.1
(function() {
  var History,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  History = (function() {
    function History() {
      this.all = bind(this.all, this);
      this.get = bind(this.get, this);
      this.clear = bind(this.clear, this);
      this.changeIndex = bind(this.changeIndex, this);
      this.acceptActive = bind(this.acceptActive, this);
      this.setActive = bind(this.setActive, this);
      this.stack = JSON.parse(localStorage.getItem('history'));
      if (this.stack == null) {
        this.stack = [];
      }
      this.active = "";
    }

    History.prototype.setActive = function(cmd) {
      return this.active = cmd;
    };

    History.prototype.acceptActive = function() {
      if (this.active !== this.stack[0]) {
        this.stack.unshift(this.active + "");
        localStorage.setItem('history', JSON.stringify(this.stack));
      }
      return this.active = "";
    };

    History.prototype.changeIndex = function(old, delta) {
      var result;
      console.log("history change index: old=" + old + ", delta=" + delta);
      result = old + delta;
      if (result < 0) {
        result = -1;
      }
      if (result >= this.stack.length) {
        result = this.stack.length - 1;
      }
      return result;
    };

    History.prototype.clear = function() {
      this.stack = [];
      return localStorage.setItem('history', '[]');
    };

    History.prototype.get = function(index) {
      switch (false) {
        case !(this.stack.length === 0 && index !== -1):
          return "";
        case !(index >= this.stack.length):
          return "";
        case !(index < 0):
          return this.active;
        default:
          return this.stack[index];
      }
    };

    History.prototype.all = function() {
      return this.stack;
    };

    return History;

  })();

  module.exports = History;

}).call(this);

//# sourceMappingURL=history.js.map
