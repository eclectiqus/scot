// Generated by CoffeeScript 1.11.1
(function() {
  var Linechart, Result, Utils, feq, fzero, ref;

  Utils = require('./utils.js');

  Result = require('./result.js').Result;

  ref = require('./geometry/eps.js'), fzero = ref.fzero, feq = ref.feq;

  Linechart = (function() {
    function Linechart(target) {
      this.target = target;
    }

    Linechart.commands = {
      help__linechart: function() {
        return "linechart\n    \nlinechart produces a chart with lines tracing data series. It\nexpects data in the form of either lists of points, or objects\nthat have data members as follows:\n    \nList form:\n    [[[x1,y1],[x2,y2],...], [[x1,y1],[x2,y2]...], ...]\n    \n    The outer list contains a bunch of series. The inner lists\n    are each single series, which are lists of point pairs. If\n    you only want to chart a single data series, you can just\n    pass in the list of point pairs and the linechart command\n    will figure it out.\n    \nObject form:\n[{\n    points: [[x1,y1],[x2,y2]...]\n    name: 'optional label for this series'\n    color: 'optional html color name'\n    style: 'optional line style'\n } ...]\n    \n    \n Examples:\n    $ [[1,1],[2,4],[3,9]] \\ linechart\n    # plots a linechart with y = x^2\n    \n    $ [[[1,1],[2,4],[3,9]],[[1,1],[2,2],[3,3]]] \\ linechart\n    # plots a chart with two lines, one for y=x^2 and the other for y=x\n    \n    $ [{ points: [[1,1],[2,4],[3,9]],\n         name: 'y=x^2',\n         color: 'red'},\n       { points: [[1,1],[2,2],[3,3]],\n         name: 'y=x',\n         color: 'blue'}] \\ linechart\n    #plots two traces, labeled and colored as given";
      },
      linechart: function(argv, d, ctx) {
        return Linechart.formatData(d).map(function(data) {
          var lc;
          lc = new Linechart(document.querySelector("#revl-vizbox"));
          return lc.render(data);
        }).map_err(function(e) {
          return Result.err("linechart: " + e);
        });
      }
    };

    Linechart.formatData = function(d) {
      var i, len, series;
      switch (false) {
        case !((Utils.isArray(d)) && (Utils.isArray(d[0])) && (Utils.isArray(d[0][0]))):
          return Result.wrap(d.map(function(series, idx) {
            return {
              points: series,
              name: 'series ' + (idx + 1),
              color: Utils.pickColor(idx, d.length),
              style: '1px solid'
            };
          }));
        case !((Utils.isArray(d)) && (Utils.isArray(d[0]))):
          return Result.wrap([
            {
              points: d,
              name: 'series 1',
              color: Utils.pickColor(0),
              style: '1px solid'
            }
          ]);
        case !((Utils.isArray(d)) && (Utils.isObject(d[0]))):
          for (i = 0, len = d.length; i < len; i++) {
            series = d[i];
            if (!Utils.isArray(series.points)) {
              return Result.err("series must have a 'points' member when objects are used");
            }
          }
          return Result.wrap(d.map(function(series, idx) {
            if (series.color == null) {
              series.color = Utils.pickColor(idx, d.length);
            }
            if (series.style == null) {
              series.style = '1px solid';
            }
            return series;
          }));
        case !Utils.isObject(d):
          if (!Utils.isArray(d.points)) {
            return Result.err("series must have a 'points' member when objects are used");
          } else {
            if (d.color == null) {
              d.color = Utils.pickColor(0);
            }
            if (d.style == null) {
              d.style = '1px solid';
            }
            return Result.wrap([d]);
          }
          break;
        default:
          return Result.err("Unrecognized data format, see 'help linechart' for details");
      }
    };

    Linechart.prototype.render = function(data) {
      var height, i, len, line, margin, ref1, ref2, series, svg, width, x, xAxis, xExt, xpad, y, yAxis, yExt, ypad;
      margin = {
        top: 20,
        right: 20,
        bottom: 30,
        left: 50
      };
      width = this.target.offsetWidth - margin.left - margin.right;
      height = this.target.offsetHeight - margin.top - margin.bottom;
      x = d3.scaleLinear().range([0, width]);
      y = d3.scaleLinear().range([height, 0]);
      xAxis = d3.axisBottom().scale(x);
      yAxis = d3.axisLeft().scale(y);
      xExt = d3.extent((ref1 = []).concat.apply(ref1, (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = data.length; i < len; i++) {
          series = data[i];
          results.push(series.points.map(function(p) {
            return p[0];
          }));
        }
        return results;
      })()));
      yExt = d3.extent((ref2 = []).concat.apply(ref2, (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = data.length; i < len; i++) {
          series = data[i];
          results.push(series.points.map(function(p) {
            return p[1];
          }));
        }
        return results;
      })()));
      xpad = (xExt[1] - xExt[0]) * 0.05;
      ypad = (yExt[1] - yExt[0]) * 0.05;
      if (fzero(xpad)) {
        xpad = 0.001;
      }
      if (fzero(ypad)) {
        ypad = 0.001;
      }
      x.domain([xExt[0] - xpad, xExt[1] + xpad]);
      y.domain([yExt[0] - ypad, yExt[1] + ypad]);
      svg = d3.select(this.target).html("").append("svg").attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom).append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
      svg.append("g").attr("class", "linechart-x axis").attr("transform", "translate(0," + height + ")").call(xAxis);
      svg.append("g").attr("class", "linechart-y-axis axis").call(yAxis);
      for (i = 0, len = data.length; i < len; i++) {
        series = data[i];
        line = d3.line().x(function(d) {
          return x(d[0]);
        }).y(function(d) {
          return y(d[1]);
        });
        svg.append("path").datum(series.points).attr("class", "linechart-line").attr("d", line).attr('stroke', series.color);
      }
      return Result.wrap(data);
    };

    return Linechart;

  })();

  module.exports = Linechart;

}).call(this);

//# sourceMappingURL=linechart.js.map
