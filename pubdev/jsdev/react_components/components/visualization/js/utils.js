// Generated by CoffeeScript 1.11.1
(function() {
  var Result, Utils,
    hasProp = {}.hasOwnProperty;

  Result = require('./result.js').Result;

  Utils = {
    isArray: Array.isArray || function(value) {
      return {}.toString.call(value) === '[object Array]';
    },
    isObject: function(ob) {
      return (typeof ob) === "object" && (ob instanceof Object) && (!Utils.isArray(ob));
    },
    isNumber: function(val) {
      return typeof val === 'number';
    },
    smartcmp: function(a, b) {
      switch (false) {
        case !((Utils.isNumber(a)) && Utils.isNumber(b)):
          return a - b;
        case !((Utils.isNumber(a)) && !Utils.isNumber(b)):
          return -1;
        case !((Utils.isNumber(b)) && !Utils.isNumber(a)):
          return 1;
        case !(a < b):
          return -1;
        case a !== b:
          return 0;
        default:
          return 1;
      }
    },
    parsefunction: function(txt, ctx) {
      var e, k, proc, src;
      try {
        src = "(" + (((function() {
          var results;
          results = [];
          for (k in ctx) {
            if (!hasProp.call(ctx, k)) continue;
            results.push(k);
          }
          return results;
        })()).join(',')) + ')-> ' + txt;
        proc = (CoffeeScript["eval"](src)).apply(ctx, (function() {
          var results;
          results = [];
          for (k in ctx) {
            if (!hasProp.call(ctx, k)) continue;
            results.push(ctx[k]);
          }
          return results;
        })());
        if ((typeof proc) !== "function") {
          return Result.err("Expected a function, got \"" + txt + "\"");
        } else {
          return Result.wrap(proc);
        }
      } catch (error) {
        e = error;
        return Result.err("" + e);
      }
    },
    parsevalue: function(txt, ctx) {
      var e, exp, k, src;
      try {
        src = "((" + (((function() {
          var results;
          results = [];
          for (k in ctx) {
            if (!hasProp.call(ctx, k)) continue;
            results.push(k);
          }
          return results;
        })()).join(',')) + ')->' + txt + ')';
        exp = (CoffeeScript["eval"](src)).apply(ctx, (function() {
          var results;
          results = [];
          for (k in ctx) {
            if (!hasProp.call(ctx, k)) continue;
            results.push(ctx[k]);
          }
          return results;
        })());
        if (typeof exp === "undefined") {
          return Result.err("Expected a value, got nothing");
        } else {
          return Result.wrap(exp);
        }
      } catch (error) {
        e = error;
        return Result.err("Parse error: " + e);
      }
    },
    hsv2rgb: function(h, s, v) {
      var ff, hh, i, p, q, t;
      if (s <= 0) {
        return {
          r: v,
          g: v,
          b: v
        };
      }
      hh = h * 6;
      if (hh >= 6) {
        hh = 0;
      }
      i = Math.floor(hh);
      ff = hh - i;
      p = v * (1 - s);
      q = v * (1 - (s * ff));
      t = v * (1 - (s * (1 - ff)));
      switch (i) {
        case 0:
          return {
            r: v,
            g: t,
            b: p
          };
        case 1:
          return {
            r: q,
            g: v,
            b: p
          };
        case 2:
          return {
            r: p,
            g: v,
            b: t
          };
        case 3:
          return {
            r: p,
            g: q,
            b: v
          };
        case 4:
          return {
            r: t,
            g: p,
            b: v
          };
        case 5:
          return {
            r: v,
            g: p,
            b: q
          };
        default:
          return {
            r: v,
            g: p,
            b: q
          };
      }
    },
    pickColor: function(index, max) {
      var rgb;
      if (max == null) {
        max = 20;
      }
      if (index >= max) {
        max = index + 1;
      }
      if (max < 5) {
        max = 5;
      }
      rgb = Utils.hsv2rgb(index / max, 0.7, 0.6);
      return '#' + ([rgb.r, rgb.g, rgb.b].map(function(c) {
        return (Math.floor(c * 256)).toString(16);
      }).join(''));
    },
    heatColor: function(index, max) {
      var colors, colorscale, datascale;
      if (max == null) {
        max = 100;
      }
      colors = ["#800", "#f80", "#ff0"];
      colorscale = d3.scaleLinear().domain([0, colors.length - 1]).range(colors);
      datascale = d3.scaleLinear().domain([0, max]).range([0, colors.length - 1]);
      return colorscale(datascale(index));
    }
  };

  module.exports = Utils;

}).call(this);

//# sourceMappingURL=utils.js.map
