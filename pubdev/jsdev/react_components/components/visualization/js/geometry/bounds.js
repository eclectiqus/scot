// Generated by CoffeeScript 1.11.1
(function() {
  var BBox;

  BBox = (function() {
    function BBox(x1, w1, y1, h1) {
      this.x = x1;
      this.w = w1;
      this.y = y1;
      this.h = h1;
    }

    BBox.prototype.intersects = function(other) {
      var delta;
      delta = function(a, da, b, db) {
        return Math.abs((a + da / 2) - (b + db / 2));
      };
      return (((delta(this.x, this.w, other.x, other.w)) * 2) < (this.w + other.w)) && ((delta(this.y, this.h, other.y, other.h)) * 2) < (this.h + other.h);
    };

    BBox.prototype.splitX = function() {
      return [this.x, this.x + this.w / 2, this.x + this.w];
    };

    BBox.prototype.splitY = function() {
      return [this.y, this.y + this.h / 2, this.y + this.h];
    };

    BBox.prototype.left = function() {
      return this.x;
    };

    BBox.prototype.right = function() {
      return this.x + this.w;
    };

    BBox.prototype.top = function() {
      return this.y + this.h;
    };

    BBox.prototype.bottom = function() {
      return this.y;
    };

    BBox.prototype.bbox = function() {
      return this;
    };

    BBox.prototype.contains = function(geom) {
      var bx;
      bx = geom.bbox();
      return (this.left() <= bx.left()) && (this.right() >= bx.right()) && (this.top() >= bx.top()) && (this.bottom() <= bx.bottom());
    };

    BBox.fromPoints = function(ptsiter) {
      var h, w, x, y;
      x = void 0;
      w = 0;
      y = void 0;
      h = 0;
      pts.forEach(function(p) {
        if ((typeof x) === 'undefined' || p.x < x) {
          x = p.x;
        }
        if ((typeof y) === 'undefined' || p.y < y) {
          y = p.y;
        }
        w = max(w, p.x - x);
        return h = max(h, p.y - y);
      });
      return new Geometry.Bounds2(x, w, y, h);
    };

    return BBox;

  })();

  module.exports = BBox;

}).call(this);

//# sourceMappingURL=bounds.js.map
