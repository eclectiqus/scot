// Generated by CoffeeScript 1.11.1
(function() {
  var Polygon, Voronoi, polygon, ref;

  ref = require('./polygon'), polygon = ref.polygon, Polygon = ref.Polygon;

  Voronoi = (function() {
    function Voronoi(points, boundary) {
      this.points = points;
      this.setBoundary(boundary);
    }

    Voronoi.prototype.addCell = function(pt) {
      if (!this.boundary || (this.boundary && this.boundary.contains(pt))) {
        this.points.push(pt);
      } else {
        throw "Error - can't add point outside voronoi diagram boundary!";
      }
      return this;
    };

    Voronoi.prototype.setBoundary = function(poly) {
      var i, len, pt, ref1;
      this.boundary = poly;
      if (this.boundary) {
        ref1 = this.points;
        for (i = 0, len = ref1.length; i < len; i++) {
          pt = ref1[i];
          if (!(this.boundary.contains(pt))) {
            throw "Error - new voronoi diagram boundary doesn't contain all points!";
          }
        }
      }
      return this;
    };

    Voronoi.prototype.layout = function() {
      var bbox, i, len, poly, polys, trimmed;
      bbox = this.boundary.bbox();
      this.polygons = [];
      polys = d3.voronoi().extent([bbox.ul().coords, bbox.lr().coords]).polygons(this.points.map(function(pt) {
        return pt.coords;
      })).map(function(pts) {
        return polygon(pts);
      });
      console.log("polygons in voronoi: " + JSON.stringify(polys));
      if (this.boundary && (this.boundary instanceof Polygon)) {
        for (i = 0, len = polys.length; i < len; i++) {
          poly = polys[i];
          trimmed = poly.trim(this.boundary);
          if (trimmed) {
            this.polygons.push(trimmed);
          }
        }
      } else {
        this.polygons = polys;
      }
      return this;
    };

    Voronoi.prototype.drawable = function() {
      return {
        polygons: this.polygons
      };
    };

    return Voronoi;

  })();

  module.exports = Voronoi;

}).call(this);

//# sourceMappingURL=voronoi.js.map
