// Generated by CoffeeScript 1.11.1
(function() {
  var BoundingBox, Vec;

  Vec = require('./vec');

  BoundingBox = (function() {
    function BoundingBox(x, y, w, h) {
      this.x = x != null ? x : 0;
      this.y = y != null ? y : 0;
      this.w = w != null ? w : 0;
      this.h = h != null ? h : 0;
    }

    BoundingBox.prototype.containing = function(pts) {
      var i, len, max_x, max_y, pt, ref;
      this.x = pts[0].x();
      this.y = pts[0].y();
      this.w = 0;
      this.h = 0;
      max_x = pts[0].x();
      max_y = pts[0].y();
      ref = pts.slice(1);
      for (i = 0, len = ref.length; i < len; i++) {
        pt = ref[i];
        if (pt.x() < this.x) {
          this.x = pt.x();
        }
        if (pt.y() < this.y) {
          this.y = pt.y();
        }
        if (pt.x() > max_x) {
          max_x = pt.x();
        }
        if (pt.y() > max_y) {
          max_y = pt.y();
        }
      }
      this.w = max_x - this.x;
      this.h = max_y - this.y;
      return this;
    };

    BoundingBox.prototype.ul = function() {
      return new Vec([this.x, this.y]);
    };

    BoundingBox.prototype.left = function() {
      return this.x;
    };

    BoundingBox.prototype.right = function() {
      return this.x + this.w;
    };

    BoundingBox.prototype.top = function() {
      return this.y;
    };

    BoundingBox.prototype.bottom = function() {
      return this.y + this.h;
    };

    BoundingBox.prototype.lr = function() {
      return new Vec([this.x + this.w, this.y + this.h]);
    };

    BoundingBox.prototype.contains = function(pt) {
      var ref, ref1;
      return ((this.x <= (ref = pt.x()) && ref <= this.x + this.w)) && ((this.y <= (ref1 = pt.y()) && ref1 <= this.y + this.h));
    };

    BoundingBox.prototype.bbox = function() {
      return this;
    };

    return BoundingBox;

  })();

  module.exports = BoundingBox;

}).call(this);

//# sourceMappingURL=boundingbox.js.map
