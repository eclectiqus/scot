// Generated by CoffeeScript 1.11.1
(function() {
  var API, Barchart, BaseCommands, BoundingBox, Dotchart, Edge, Editor, Eps, Forcegraph, Http, Linechart, List, Nspace, Poly, Polygon, Preview, React, Result, ResultPromise, Revl, Shell, Strings, Struct, Utils, Vec, Visualization, Voronoi, polygon, ref, ref1,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  React = require('react');

  Editor = require('./editor');

  Preview = require('./preview');

  Visualization = require('./visualization');

  Shell = require('./shell');

  BaseCommands = require('./base-commands');

  Barchart = require('./barchart');

  Linechart = require('./linechart');

  Dotchart = require('./dotchart');

  Forcegraph = require('./forcegraph');

  Poly = require('./poly');

  Http = require('./http');

  List = require('./list');

  Struct = require('./struct');

  Nspace = require('./space/nspace');

  ref = require('./geometry/polygon'), Polygon = ref.Polygon, polygon = ref.polygon;

  Edge = require('./geometry/edge');

  BoundingBox = require('./geometry/boundingbox');

  Voronoi = require('./geometry/voronoi');

  Eps = require('./geometry/eps');

  Vec = require('./geometry/vec');

  Http = require('./http');

  Utils = require('./utils');

  Strings = require('./strings');

  API = require('./api');

  Poly = require('./poly');

  ref1 = require('./result'), Result = ref1.Result, ResultPromise = ref1.ResultPromise;

  Revl = (function(superClass) {
    extend(Revl, superClass);

    Revl.revl = null;

    function Revl(props) {
      Revl.__super__.constructor.call(this, props);
      this.shell = new Shell(this.output.bind(this));
      this.shell.addCommands(BaseCommands);
      this.shell.addCommands(Barchart.commands);
      this.shell.addCommands(Dotchart.commands);
      this.shell.addCommands(Linechart.commands);
      this.shell.addCommands(Forcegraph.commands);
      this.shell.addCommands(Poly.commands);
      this.shell.addCommands(Http.commands);
      this.shell.addCommands(Nspace.commands);
      this.shell.addCommands(Voronoi.commands);
      this.shell.addCommands(Strings.commands);
      this.shell.addCommands(API.commands);
      this.shell.addCommands(Result.commands);
      this.shell.addCommands(ResultPromise.commands);
      this.shell.addScope(List);
      this.shell.addScope(Polygon.scope);
      this.shell.addScope(Eps);
      this.shell.addScope({
        Struct: Struct,
        Vec: Vec,
        Poly: Poly,
        Voronoi: Voronoi,
        Pgon: Polygon,
        polygon: polygon,
        Http: Http,
        Edge: Edge,
        BBox: BoundingBox,
        Utils: Utils,
        Strings: Strings,
        Nspace: Nspace,
        API: API,
        Result: Result,
        ResultPromise: ResultPromise
      });
      this.shell.loadSavedData();
      this.state = {};
      Revl.revl = this;
    }

    Revl.prototype.output = function(str) {
      if (this.refs.editor) {
        return this.refs.editor.output(str);
      } else {
        console.log("Editor undefined");
        return console.log(str);
      }
    };

    Revl.prototype.render = function() {
      var div;
      div = React.DOM.div;
      return div({
        onFocus: (function(_this) {
          return function() {
            return _this.refs.editor.focus();
          };
        })(this),
        tabIndex: 0,
        id: "revl",
        style: {
          position: 'absolute',
          top: '5vh',
          bottom: 0,
          right: 0,
          left: 0,
          height: '95vh',
          width: '100vw'
        }
      }, [
        Visualization({
          key: 2,
          revl: this,
          ref: 'visualization'
        }), Editor({
          key: 0,
          shell: this.shell,
          revl: this,
          ref: 'editor'
        })
      ]);
    };

    return Revl;

  })(React.Component);

  module.exports = React.createFactory(Revl);

}).call(this);

//# sourceMappingURL=revl.js.map
