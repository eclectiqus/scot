// Generated by CoffeeScript 1.11.1
(function() {
  var Result, Struct, Utils,
    hasProp = {}.hasOwnProperty;

  Utils = require('./utils');

  Result = require('./result').Result;

  Struct = {
    bfs: function(s, proc) {
      var item, k, n, q, result;
      result = [];
      q = (function() {
        var results;
        results = [];
        for (k in s) {
          if (!hasProp.call(s, k)) continue;
          results.push([[k], s[k]]);
        }
        return results;
      })();
      n = 0;
      while (q.length > 0) {
        item = q.shift();
        if (Utils.isObject(item[1])) {
          [].push.apply(q, (function() {
            var results;
            results = [];
            for (k in item[1]) {
              results.push([item[0].concat([k]), item[1][k]]);
            }
            return results;
          })());
        } else {
          result.push(proc(item[1], item[0], n));
          n = n + 1;
        }
      }
      return result;
    },
    map: function(s, proc) {
      var key, result, value;
      result = {};
      for (key in s) {
        if (!hasProp.call(s, key)) continue;
        value = s[key];
        result[key] = proc(value, key);
      }
      return result;
    },
    deepmap: function(s, proc) {
      var key, result, value;
      result = {};
      for (key in s) {
        if (!hasProp.call(s, key)) continue;
        value = s[key];
        if (Utils.isObject(value)) {
          result[key] = Struct.deepmap(value, proc);
        } else {
          result[key] = proc(value);
        }
      }
      return result;
    },
    filter: function(s, proc) {
      var key, result, value;
      result = {};
      for (key in s) {
        if (!hasProp.call(s, key)) continue;
        value = s[key];
        if (proc(value, key)) {
          result[key] = value;
        }
      }
      return result;
    },
    tolist: function(s) {
      var key, results;
      results = [];
      for (key in s) {
        if (!hasProp.call(s, key)) continue;
        results.push([key, s[key]]);
      }
      return results;
    },
    select: function(s, keys) {
      var i, k, len, r;
      r = {};
      for (i = 0, len = keys.length; i < len; i++) {
        k = keys[i];
        if (k in s) {
          r[k] = s[k];
        }
      }
      return r;
    }
  };

  module.exports = Struct;

}).call(this);

//# sourceMappingURL=struct.js.map
