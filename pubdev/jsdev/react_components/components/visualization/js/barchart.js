// Generated by CoffeeScript 1.11.1
(function() {
  var Barchart, Result;

  Result = require('./result').Result;

  Barchart = (function() {
    Barchart.commands = {
      help__barchart: function() {
        return "barchart\n\nbarchart produces a bar chart in the visualization pane\nbased on the input. Input should be formatted as an\nobject, where the keys will be the chart labels and the\nvalues will be the heights of the bars. The chart is\nautomatically scaled so that all bars fit and the tallest\nbar is the height of the full chart. You can also just\npass in a list of numbers, and the labels will be the\nindexes.\n\nExamples:\n  $ {cheezburgers: 50, cats: 1} \\ barchart\n\n  $ [1,2,3,4,5] \\ barchart\n\nThe first example command produces a chart with two\nbars. The first is labeled \"cheezburgers\" and has height\n50, and the second is labeled \"cats\" and has height 1.\n\nThe second example produces a bar chart with five bars,\nlabeled 0 through 4, with heights given in the list.\n\nThe input will be passed through this command so you can\npipe other commands after it if needed";
      },
      barchart: function(argv, d) {
        var chart;
        chart = new Barchart(argv, d);
        chart.render("#revl-vizbox");
        return Result.wrap(d);
      }
    };

    function Barchart(argv, data) {
      var k, ref, v;
      this.data = data;
      this.maxdata = void 0;
      this.pairs = [];
      ref = this.data;
      for (k in ref) {
        v = ref[k];
        if (this.maxdata == null) {
          this.maxdata = v;
        }
        this.pairs.push([k, +v]);
        if (this.maxdata < v) {
          this.maxdata = v;
        }
      }
    }

    Barchart.prototype.render = function(target) {
      var g, height, margin, svg, width, x, y;
      svg = d3.select(target).html("").append("svg").attr("class", "viz");
      margin = {
        top: 20,
        right: 20,
        bottom: 30,
        left: 40
      };
      width = +document.querySelector(target).offsetWidth - margin.left - margin.right;
      height = +document.querySelector(target).offsetHeight - margin.top - margin.bottom;
      console.log("width: " + width);
      console.log("height: " + height);
      x = d3.scaleBand().rangeRound([0, width]).padding(0.1).domain(this.pairs.map(function(p) {
        return p[0];
      }));
      y = d3.scaleLinear().rangeRound([height, 0]).domain([
        0, d3.max(this.pairs.map(function(p) {
          return p[1];
        }))
      ]);
      g = svg.append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
      console.log("bar width: " + x.bandwidth());
      g.append("g").attr("class", "axis barchart-axis--x").attr("transform", "translate(0," + height + ")").call(d3.axisBottom(x));
      g.append("g").attr("class", "axis barchart-axis--y").call((d3.axisLeft(y)).ticks(10)).append("text").attr("transform", "rotate(-90)").attr("y", 6).attr("dy", "0.71em").attr("text-anchor", "end").text("Value");
      return g.selectAll(".barchart-bar").data(this.pairs).enter().append("rect").attr("class", "barchart-bar").attr("x", function(d) {
        return x(d[0]);
      }).attr("y", function(d) {
        return y(d[1]);
      }).attr("width", x.bandwidth()).attr("height", function(d) {
        return height - y(d[1]);
      });
    };

    return Barchart;

  })();

  module.exports = Barchart;

}).call(this);

//# sourceMappingURL=barchart.js.map
