// Generated by CoffeeScript 1.11.1
(function() {
  var Editor, Progress, Prompt, React,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  React = require('react');

  Prompt = require('./prompt');

  Progress = require('./progress');

  Editor = (function(superClass) {
    var Backspace, Delete, DownArrow, End, Enter, Escape, Home, LeftArrow, RightArrow, Tab, UpArrow;

    extend(Editor, superClass);

    Backspace = 8;

    Tab = 9;

    Enter = 13;

    Escape = 27;

    End = 35;

    Home = 36;

    LeftArrow = 37;

    UpArrow = 38;

    RightArrow = 39;

    DownArrow = 40;

    Delete = 46;

    function Editor(props) {
      this.focus = bind(this.focus, this);
      this.output = bind(this.output, this);
      this.progress = bind(this.progress, this);
      this.keyDown = bind(this.keyDown, this);
      this.onChange = bind(this.onChange, this);
      this.toggleTrace = bind(this.toggleTrace, this);
      this.startDrag = bind(this.startDrag, this);
      this.render = bind(this.render, this);
      Editor.__super__.constructor.call(this, props);
      this.history_index = -1;
      this._command_handler = function() {
        return null;
      };
      this._completion_handler = function() {
        return null;
      };
      this.shell = props.shell;
      this.revl = props.revl;
      if ((!this.shell) || (!this.revl)) {
        throw "Error - Editor must be provided with a Shell and Revl instance in props";
      }
      this.shell.registerEditor(this);
      this.prompt = "$  ";
      this.trace_accumulator = "";
      this.state = {
        cmd: "",
        trace: "",
        cursor: 'none',
        traceheight: 50,
        progress: {
          done: 1,
          total: 1,
          running: false
        }
      };
    }

    Editor.prototype.componentDidUpdate = function() {
      return this.refs.trace.scrollTop = this.refs.trace.scrollHeight;
    };

    Editor.prototype.render = function() {
      var div, pre, ref, span;
      this.trace_accumulator = "";
      ref = React.DOM, div = ref.div, span = ref.span, pre = ref.pre;
      console.log("editor render");
      return div({
        id: "revl-shell-panel",
        tabIndex: 0,
        ref: 'terminal',
        onKeyDown: this.keyDown,
        style: {
          height: this.state.traceheight + 'px'
        }
      }, [
        div({
          className: 'drag-vert',
          onMouseDown: this.startDrag,
          onDoubleClick: this.toggleTrace,
          key: 0
        }, ''), div({
          id: "trace",
          className: "trace",
          ref: "trace",
          key: 1,
          style: {
            border: "none"
          }
        }, pre({}, this.state.trace)), Progress({
          key: 3,
          running: this.state.progress.running,
          done: this.state.progress.done,
          total: this.state.progress.total
        }), Prompt({
          content: this.state.cmd,
          onChange: this.onChange,
          ref: 'prompt',
          key: 2,
          style: {
            border: "none"
          }
        })
      ]);
    };

    Editor.prototype.startDrag = function(e) {
      var drag, last_y, stopdrag, term;
      last_y = e.pageY;
      term = this.refs.terminal;
      drag = (function(_this) {
        return function(e) {
          var dy;
          dy = e.pageY - last_y;
          last_y = e.pageY;
          return _this.setState({
            traceheight: _this.state.traceheight - dy,
            minimize: false
          });
        };
      })(this);
      stopdrag = (function(_this) {
        return function(e) {
          window.removeEventListener('mousemove', drag);
          window.removeEventListener('mouseup', stopdrag);
          return window.removeEventListener('mouseleave', stopdrag);
        };
      })(this);
      window.addEventListener('mousemove', drag);
      window.addEventListener('mouseup', stopdrag);
      return window.addEventListener('mouseleave', stopdrag);
    };

    Editor.prototype.toggleTrace = function(e) {
      if (!this.state.minimize) {
        this.setState({
          lastheight: this.state.traceheight,
          traceheight: '20'
        });
      } else {
        this.setState({
          traceheight: this.state.lastheight
        });
      }
      return this.setState({
        minimize: !this.state.minimize
      });
    };

    Editor.prototype.getKeyInfo = function(e) {
      var c, code;
      code = e.keyCode || e.charCode;
      c = String.fromCharCode(code);
      return {
        code: code,
        character: c,
        shift: e.shiftKey,
        control: e.controlKey,
        alt: e.altKey
      };
    };

    Editor.prototype.isPrintable = function(ch) {
      return ((31 < ch && ch < 128)) || ch === 13 || ch === 9;
    };

    Editor.prototype.onChange = function(cmd) {
      this.shell.history.setActive(cmd);
      return this.setState({
        cmd: cmd
      });
    };

    Editor.prototype.keyDown = function(event) {
      var cmd;
      if (event.keyCode === 0 || event.defaultPrevented || event.metaKey || event.altKey || event.ctrlKey) {
        return false;
      }
      switch (event.keyCode) {
        case Enter:
          if (this.state.cmd.trim().slice(-1) === '\\') {
            this.setState({
              cmd: this.state.cmd + '\n'
            }, (function(_this) {
              return function() {
                return _this.refs.prompt.moveCaret();
              };
            })(this));
          } else {
            cmd = this.state.cmd;
            this.output(this.prompt + (cmd.replace(/[ ]*\n/g, '\n..  ')) + "\n");
            this.shell.history.setActive(cmd.replace(/\\ *\n/g, "\\\n"));
            this.shell.history.acceptActive();
            this.history_index = -1;
            this._command_handler(cmd);
            this.setState({
              cmd: ''
            });
          }
          break;
        case Tab:
          this.setState({
            cmd: this._completion_handler(this.state.cmd)
          });
          break;
        case UpArrow:
          this.history_index = this.shell.history.changeIndex(this.history_index, 1);
          this.setState({
            cmd: this.shell.history.get(this.history_index)
          }, (function(_this) {
            return function() {
              return _this.refs.prompt.moveCaret();
            };
          })(this));
          break;
        case DownArrow:
          this.history_index = this.shell.history.changeIndex(this.history_index, -1);
          this.setState({
            cmd: this.shell.history.get(this.history_index)
          }, (function(_this) {
            return function() {
              return _this.refs.prompt.moveCaret();
            };
          })(this));
          break;
        default:
          return true;
      }
      event.preventDefault();
      event.stopPropagation();
      event.cancelBubble = true;
      return false;
    };

    Editor.prototype.setCommandHandler = function(handler) {
      return this._command_handler = handler;
    };

    Editor.prototype.setCompletionHandler = function(handler) {
      return this._completion_handler = handler;
    };

    Editor.prototype.progress = function(done, total) {
      return this.setState({
        progress: {
          done: done,
          total: total,
          running: done < total
        }
      });
    };

    Editor.prototype.output = function(text) {
      this.trace_accumulator += text;
      return this.setState({
        trace: this.state.trace + this.trace_accumulator
      });
    };

    Editor.prototype.focus = function() {
      return this.refs.prompt.focus();
    };

    return Editor;

  })(React.Component);

  module.exports = React.createFactory(Editor);

}).call(this);

//# sourceMappingURL=editor.js.map
