// Generated by CoffeeScript 1.11.1
(function() {
  var Dotchart, Result, Utils, fzero;

  Utils = require('./utils');

  Result = require('./result').Result;

  fzero = require('./geometry/eps').fzero;

  Dotchart = (function() {
    function Dotchart(pts) {
      this.pts = pts;
    }

    Dotchart.prototype.draw = function(target) {
      var height, margin, svg, width, x, xAxis, xExt, xpad, y, yAxis, yExt, ypad;
      margin = {
        top: 20,
        right: 20,
        bottom: 30,
        left: 50
      };
      width = target.offsetWidth - margin.left - margin.right;
      height = target.offsetHeight - margin.top - margin.bottom;
      x = d3.scaleLinear().range([0, width]);
      y = d3.scaleLinear().range([height, 0]);
      xAxis = d3.axisBottom().scale(x);
      yAxis = d3.axisLeft().scale(y);
      xExt = d3.extent(this.pts.map(function(p) {
        return p[0];
      }));
      yExt = d3.extent(this.pts.map(function(p) {
        return p[1];
      }));
      xpad = (xExt[1] - xExt[0]) * 0.05;
      ypad = (yExt[1] - yExt[0]) * 0.05;
      if (fzero(xpad)) {
        xpad = 0.001;
      }
      if (fzero(ypad)) {
        ypad = 0.001;
      }
      x.domain([xExt[0] - xpad, xExt[1] + xpad]);
      y.domain([yExt[0] - ypad, yExt[1] + ypad]);
      svg = d3.select(target).html("").append("svg").attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom).append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
      svg.append("g").attr("class", "linechart-x axis").attr("transform", "translate(0," + height + ")").call(xAxis);
      svg.append("g").attr("class", "linechart-y-axis axis").call(yAxis);
      svg.selectAll(".dot").data(this.pts).enter().append("circle").attr("class", "dot").attr("r", 1.5).attr("cx", function(d) {
        return x(d[0]);
      }).attr("cy", function(d) {
        return y(d[1]);
      }).style("fill", function(d) {
        return Utils.pickColor(d[0], xExt[1]);
      });
      return Result.wrap(this.pts);
    };

    Dotchart.commands = {
      help__dotchart: function() {
        return "dotchart\n\nDotchart makes a scatter plot, with one dot for each data\npoint in a 2D data set.\n\nExample:\n    $ get \"https://localhost/scot/api/v2/alertgroup/1512214/alert?limit=100\" \\\n    ..    (r)->map r.records,(rec)->rec.data._time \\\n    ..    pick Strings.pat.hms \\\n    ..    (ls)->(parseInt ls[1])*3600 + (parseInt ls[2])*60 + parseInt ls[3] \\\n    ..    sort \\\n    ..    (t,i)->[t,i] \\\n    ..    dotchart\n\n    This command retreives the alerts in alertgroup\n    1512214, picks out all of the timestamps, converts\n    them to a number of seconds (assuming the day is all\n    the same), sorts them in ascending order,then makes a\n    dotchart with the x coordinate being the timestamp and\n    the y coordinate being the position of the event in\n    the set. This makes it easy to see timing patterns\n    (they look like tall spikes of dots).";
      },
      dotchart: function(argv, d, ctx) {
        var chart;
        chart = new Dotchart(d);
        return chart.draw(document.querySelector("#revl-vizbox"));
      }
    };

    return Dotchart;

  })();

  module.exports = Dotchart;

}).call(this);

//# sourceMappingURL=dotchart.js.map
