Thoughts on making some general-purpoose polygon diagramming tools

The main point of this whole project is to make composable primitives
for dumping data into. I don't want to have a whole pile of 2d polygon
based diagram types that each have their own semantics and
idiosyncratic data formats. It would be a lot better if I could just
have a single polygon diagram type, with some special functions for
generating samples of it.

I'd like to be able to use my existing tree and list tools to turn a
data item into a viz item. In order to do that, I need to have some
kind of general purpose polygon data structure that supports the same
kinds of operations as the objects and arrays in javascript, and also
allows itself to be built and modified incrementally. 

I need functions that make recursive polygon data structures that work
like map does. The issue is that I have to decide how to subdivide the
current polygon to make a new level. I could make separate map
functions for different subdivision strategies (voronoi, rectangular,
striped, etc). Subdivision strategies have to go from top down, which
is opposite of the direction in which typical recursive programs
operate. I need to make them behave like fold instead of map.

Example:
poly-map voronoi (circle 100) (d)->{color: Utils.heat d.count/maxcount, src: d}

This function would start with a polygon (defined in this case by
(circle 100)) and subdivide it into n polygons where n is the number
of items at the current top level of the data being mapped. It would
then assign each new cell to one of the top data items and call itself
recursively with that new cell and its associated data item. The
subdivision algorithm is voronoi. The return value would be the new
polygon data structure.

So we have a general purpose function to copy a list structure into a
polygon structure, a set of subdivision algorithms that take a polygon
and create some number of subpolygons inside it, and a set of basic
primitives for creating shapes for the diagram boundary. The user
supplies the function that adds whatever visual characteristics are
desired to the resulting polygons.


#+begin_src shell
  $ getpackets \ 
      group (p) -> p.src_ip \
      (plist,ip)-> {ip: ip, count: plist.length} \
      nest (stat) -> [''+octet for octet in stat.ip] \
      breadth_fold (Poly.rect 100, 100) (level, 
#+end_src
