'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExpandGlyph = exports.rightArrow = exports.downArrow = exports.upArrow = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _unselectable = require('./unselectable');

var _unselectable2 = _interopRequireDefault(_unselectable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// http://unicode-table.com/en/sets/arrows-symbols/
var upArrow = exports.upArrow = '▲';
var downArrow = exports.downArrow = '▼';
var rightArrow = exports.rightArrow = '▶';

var styles = {
  expandGlyph: {
    color: '#6e6e6e',
    fontSize: '10px',
    marginRight: '3px',
    whiteSpace: 'pre'
  }
};

// if placeholder is defined return placeholder, else return an arrow according to the expanded prop
var ExpandGlyph = function ExpandGlyph(_ref) {
  var expanded = _ref.expanded;
  var empty = _ref.empty;

  if (empty)
    // a placeholder (space char) before keys
    return _react2.default.createElement(
      'span',
      { style: _extends({}, styles.expandGlyph, _unselectable2.default) },
      ' '
    );else return _react2.default.createElement(
    'span',
    { style: _extends({}, styles.expandGlyph, _unselectable2.default) },
    expanded ? downArrow : rightArrow
  );
};

exports.ExpandGlyph = ExpandGlyph;