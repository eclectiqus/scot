'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _ObjectDescription = require('../object/ObjectDescription');

var _ObjectDescription2 = _interopRequireDefault(_ObjectDescription);

var _getHeaders2 = require('./getHeaders');

var _getHeaders3 = _interopRequireDefault(_getHeaders2);

var _glyphs = require('../styles/glyphs');

var _unselectable = require('../styles/unselectable');

var _unselectable2 = _interopRequireDefault(_unselectable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Specs:
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * https://developer.chrome.com/devtools/docs/commandline-api#tabledata-columns
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * https://developer.mozilla.org/en-US/docs/Web/API/Console/table
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var styles = {
  base: {
    position: 'relative',
    border: '1px solid #aaa',
    fontFamily: 'Menlo, monospace',
    fontSize: '11px',
    lineHeight: '120%',
    boxSizing: 'border-box',
    cursor: 'default'
  },
  // table: {
  // },
  th: {
    position: 'relative', // anchor for sort icon container
    height: 'auto',
    textAlign: 'left',
    backgroundColor: '#eee',
    borderBottom: '1px solid #aaa',
    fontWeight: 'normal',
    verticalAlign: 'middle',
    padding: '0 4px',

    whiteSpace: 'nowrap',
    textOverflow: 'ellipsis',
    overflow: 'hidden',
    lineHeight: '14px'
  },
  'th:hover': {
    backgroundColor: 'hsla(0, 0%, 90%, 1)'
  },
  // th > div
  th_div: {
    whiteSpace: 'nowrap',
    textOverflow: 'ellipsis',
    overflow: 'hidden',

    // otherwise it's overriden by user agent stylesheet
    fontSize: '11px',
    lineHeight: '120%'
  },
  tr: {
    display: 'table-row'
  },
  td: {
    boxSizing: 'border-box', //
    border: 'none', // prevent overrides
    height: '16px', // /* 0.5 * background-size height */
    verticalAlign: 'top',
    padding: '1px 4px',
    WebkitUserSelect: 'text',

    whiteSpace: 'nowrap',
    textOverflow: 'ellipsis',
    overflow: 'hidden',
    lineHeight: '14px'
  },
  leftBorder: {
    none: {
      borderLeft: 'none'
    },
    solid: {
      borderLeft: '1px solid #aaa'
    }
  }
};

var SortIconContainer = function SortIconContainer(props) {
  return _react2.default.createElement(
    'div',
    { style: {
        position: 'absolute',
        top: 1,
        right: 0,
        bottom: 1,
        display: 'flex',
        alignItems: 'center'
      } },
    props.children
  );
};

var SortIcon = function SortIcon(_ref) {
  var sortAscending = _ref.sortAscending;

  var glyph = sortAscending ? _glyphs.upArrow : _glyphs.downArrow;
  return _react2.default.createElement(
    'div',
    { style: Object.assign({
        display: 'block',
        marginRight: 3, // 4,
        width: 8,
        height: 7,

        marginTop: -7,
        color: '#6e6e6e', //'rgb(48, 57, 66)'
        fontSize: 12
      }, // lineHeight: 14
      _unselectable2.default) },
    glyph
  );
};

var TH = function (_Component) {
  _inherits(TH, _Component);

  function TH(props) {
    _classCallCheck(this, TH);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(TH).call(this, props));

    _this.state = { hovered: false };
    return _this;
  }

  _createClass(TH, [{
    key: 'toggleHovered',
    value: function toggleHovered(e) {
      this.setState({ hovered: !this.state.hovered });
    }
  }, {
    key: 'render',
    value: function render() {
      // either not sorted, sort ascending or sort descending
      var sortAscending = this.props.sortAscending;
      var sorted = this.props.sorted;

      return _react2.default.createElement(
        'th',
        _extends({}, this.props, {
          style: _extends({}, styles.th, this.props.borderStyle, this.state.hovered ? this.props.hoveredStyle : {}),
          onMouseEnter: this.toggleHovered.bind(this),
          onMouseLeave: this.toggleHovered.bind(this),
          onClick: this.props.onClick }),
        _react2.default.createElement(
          'div',
          { style: styles.th_div },
          this.props.children
        ),
        function () {
          if (sorted) {
            return _react2.default.createElement(
              SortIconContainer,
              null,
              _react2.default.createElement(SortIcon, { sortAscending: sortAscending })
            );
          }
        }()
      );
    }
  }]);

  return TH;
}(_react.Component);

TH.defaultProps = {
  sortAscending: false,
  sorted: false,
  hoveredStyle: styles['th:hover'],
  borderStyle: styles.leftBorder.solid,
  onClick: undefined
};

var HeaderContainer = function HeaderContainer(_ref2) {
  var indexColumnText = _ref2.indexColumnText;
  var columns = _ref2.columns;
  var sorted = _ref2.sorted;
  var sortIndexColumn = _ref2.sortIndexColumn;
  var sortColumn = _ref2.sortColumn;
  var sortAscending = _ref2.sortAscending;
  var onTHClick = _ref2.onTHClick;
  var onIndexTHClick = _ref2.onIndexTHClick;
  return _react2.default.createElement(
    'div',
    { style: {
        top: 0,
        height: '17px',
        left: 0,
        right: 0,
        overflowX: 'hidden'
      } },
    _react2.default.createElement(
      'table',
      { style: {
          tableLayout: 'fixed',
          borderSpacing: '0',
          borderCollapse: 'separate',
          height: '100%',
          width: '100%',
          margin: '0' } },
      _react2.default.createElement(
        'tbody',
        null,
        _react2.default.createElement(
          'tr',
          null,
          _react2.default.createElement(
            TH,
            { borderStyle: styles.leftBorder.none,
              sorted: sorted && sortIndexColumn,
              sortAscending: sortAscending,
              onClick: onIndexTHClick },
            indexColumnText
          ),
          columns.map(function (column) {
            return _react2.default.createElement(
              TH,
              { key: column,
                sorted: sorted && sortColumn === column,
                sortAscending: sortAscending,
                onClick: onTHClick.bind(undefined, column) },
              column
            );
          })
        )
      )
    )
  );
};

HeaderContainer.defaultProps = {
  indexColumnText: '(index)',
  columns: []
};

var DataContainer = function DataContainer(_ref3) {
  var rows = _ref3.rows;
  var columns = _ref3.columns;
  var rowsData = _ref3.rowsData;
  return _react2.default.createElement(
    'div',
    { style: {
        position: 'static',
        top: '17px',
        bottom: 0,
        overflowY: 'overlay',
        transform: 'translateZ(0)',

        left: 0,
        right: 0,
        overflowX: 'hidden'
      } },
    _react2.default.createElement(
      'table',
      { style: {
          positon: 'static',
          left: 0,
          top: 0,
          right: 0,
          bottom: 0,
          borderTop: '0 none transparent',
          margin: 0, // prevent overrides

          backgroundImage: 'linear-gradient(to bottom, white, white 50%, rgb(234, 243, 255) 50%, rgb(234, 243, 255))',
          backgroundSize: '128px 32px',
          tableLayout: 'fixed',

          // table
          borderSpacing: '0',
          borderCollapse: 'separate',
          // height: '100%',
          width: '100%',

          fontSize: '11px',
          lineHeight: '120%'
        } },
      _react2.default.createElement('colgroup', null),
      _react2.default.createElement(
        'tbody',
        null,
        rows.map(function (row, i) {
          return _react2.default.createElement(
            'tr',
            { key: row, style: styles.tr },
            _react2.default.createElement(
              'td',
              { style: _extends({}, styles.td, styles.leftBorder.none) },
              row
            ),
            columns.map(function (column) {
              var rowData = rowsData[i];
              // rowData could be
              //  object -> index by key
              //    array -> index by array index
              //    null -> pass
              //  boolean -> pass
              //  string -> pass (hasOwnProperty returns true for [0..len-1])
              //  number -> pass
              //  function -> pass
              //  symbol
              //  undefined -> pass
              if ((typeof rowData === 'undefined' ? 'undefined' : _typeof(rowData)) === 'object' && rowData !== null && rowData.hasOwnProperty(column)) {
                return _react2.default.createElement(
                  'td',
                  { key: column, style: _extends({}, styles.td, styles.leftBorder.solid) },
                  _react2.default.createElement(_ObjectDescription2.default, { object: rowData[column] })
                );
              } else {
                return _react2.default.createElement('td', { key: column, style: _extends({}, styles.td, styles.leftBorder.solid) });
              }
            })
          );
        })
      )
    )
  );
};

// import ObjectInspector from '../object-inspector/ObjectInspector'

var TableInspector = function (_Component2) {
  _inherits(TableInspector, _Component2);

  function TableInspector(props) {
    _classCallCheck(this, TableInspector);

    var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(TableInspector).call(this, props));

    _this2.state = {
      sorted: false, // has user ever clicked the <th> tag to sort?
      sortIndexColumn: false, // is index column sorted?
      sortColumn: undefined, // which column is sorted?
      sortAscending: false // is sorting ascending or descending?
    };
    return _this2;
  }

  _createClass(TableInspector, [{
    key: 'handleIndexTHClick',
    value: function handleIndexTHClick() {
      this.setState({
        sorted: true,
        sortIndexColumn: true,
        sortColumn: undefined,
        // when changed to a new column, default to asending
        sortAscending: this.state.sortIndexColumn ? !this.state.sortAscending : true
      });
    }
  }, {
    key: 'handleTHClick',
    value: function handleTHClick(col) {
      this.setState({
        sorted: true,
        sortIndexColumn: false,
        sortColumn: col,
        sortAscending: col === this.state.sortColumn ? !this.state.sortAscending : true
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var data = this.props.data;
      var columns = this.props.columns;
      if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) !== 'object' || data === null) {
        return _react2.default.createElement('div', null);
      }

      var _getHeaders = (0, _getHeaders3.default)(data);

      var rowHeaders = _getHeaders.rowHeaders;
      var colHeaders = _getHeaders.colHeaders;

      // columns to be displayed are specified
      // NOTE: there's some space for optimization here

      if (columns !== undefined) {
        colHeaders = columns;
      }

      var rowsData = rowHeaders.map(function (rowHeader) {
        return data[rowHeader];
      });

      var sorted = this.state.sorted,
          sortIndexColumn = this.state.sortIndexColumn,
          sortColumn = this.state.sortColumn,
          sortAscending = this.state.sortAscending;

      var columnDataWithRowIndexes = undefined; /* row indexes are [0..nRows-1] */
      // TODO: refactor
      if (sortColumn !== undefined) {
        // the column to be sorted (rowsData, column) => [[columnData, rowIndex]]
        columnDataWithRowIndexes = rowsData.map(function (rowData, index) {
          // normalize rowData
          if ((typeof rowData === 'undefined' ? 'undefined' : _typeof(rowData)) === 'object' && rowData !== null /*&& rowData.hasOwnProperty(sortColumn)*/) {
              var columnData = rowData[sortColumn];
              return [columnData, index];
            }
          return [undefined, index];
        });
      } else {
        if (sortIndexColumn) {
          columnDataWithRowIndexes = rowHeaders.map(function (rowData, index) {
            var columnData = rowHeaders[index];
            return [columnData, index];
          });
        }
      }
      if (columnDataWithRowIndexes !== undefined) {
        // apply a mapper before sorting (because we need to access inside a container)
        var comparator = function comparator(mapper, ascending) {
          return function (a, b) {
            var v1 = mapper(a); // the datum
            var v2 = mapper(b);
            var type1 = typeof v1 === 'undefined' ? 'undefined' : _typeof(v1);
            var type2 = typeof v2 === 'undefined' ? 'undefined' : _typeof(v2);
            // use '<' operator to compare same type of values or compare type precedence order #
            var lt = function lt(v1, v2) {
              if (v1 < v2) {
                return -1;
              } else if (v1 > v2) {
                return 1;
              } else {
                return 0;
              }
            };
            var result = undefined;
            if (type1 === type2) {
              result = lt(v1, v2);
            } else {
              // order of different types
              var order = { 'string': 0, 'number': 1, 'object': 2, 'symbol': 3, 'boolean': 4, 'undefined': 5, 'function': 6 };
              result = lt(order[type1], order[type2]);
            }
            // reverse result if descending
            if (!ascending) result = -result;
            return result;
          };
        };
        var sortedRowIndexes = columnDataWithRowIndexes.sort(comparator(function (item) {
          return item[0];
        }, sortAscending)).map(function (item) {
          return item[1];
        }); // sorted row indexes
        rowHeaders = sortedRowIndexes.map(function (i) {
          return rowHeaders[i];
        });
        rowsData = sortedRowIndexes.map(function (i) {
          return rowsData[i];
        });
      }

      return _react2.default.createElement(
        'div',
        { style: styles.base },
        _react2.default.createElement(HeaderContainer, { columns: colHeaders
          /* for sorting */
          , sorted: this.state.sorted,
          sortIndexColumn: this.state.sortIndexColumn,
          sortColumn: this.state.sortColumn,
          sortAscending: this.state.sortAscending,
          onTHClick: this.handleTHClick.bind(this),
          onIndexTHClick: this.handleIndexTHClick.bind(this) }),
        _react2.default.createElement(DataContainer, { rows: rowHeaders,
          columns: colHeaders,
          rowsData: rowsData })
      );
    }
  }]);

  return TableInspector;
}(_react.Component);

exports.default = TableInspector;


TableInspector.propTypes = {
  data: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.array, _react2.default.PropTypes.object]),
  columns: _react2.default.PropTypes.array
};

TableInspector.defaultProps = {
  data: undefined,
  columns: undefined
};