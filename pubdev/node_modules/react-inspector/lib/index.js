'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TableInspector = exports.ObjectInspector = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _ObjectInspector2 = require('./object-inspector/ObjectInspector');

var _ObjectInspector3 = _interopRequireDefault(_ObjectInspector2);

var _TableInspector2 = require('./table-inspector/TableInspector');

var _TableInspector3 = _interopRequireDefault(_TableInspector2);

var _pathUtils = require('./object-inspector/pathUtils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

exports.ObjectInspector = _ObjectInspector3.default;
exports.TableInspector = _TableInspector3.default;

// NOTE: ObjectDecription and ObjectPreview can be used as building blocks, but currently their styles are not complete
// export ObjectDecription from './object/ObjectDescription'
// export ObjectPreview from './object/ObjectPreview'

// Wrapping the inspectors

var Inspector = function Inspector(_ref) {
  var _ref$table = _ref.table;
  var table = _ref$table === undefined ? false : _ref$table;
  var data = _ref.data;

  var rest = _objectWithoutProperties(_ref, ['table', 'data']);

  if (table) {
    return _react2.default.createElement(_TableInspector3.default, { data: data });
  }

  return _react2.default.createElement(_ObjectInspector3.default, _extends({ data: data }, rest));

  // // TODO: refactor out root path
  // let wildcardPaths = []
  // if(level !== undefined){
  //   wildcardPaths = wildcardPaths.concat(wildcardPathsFromLevel(level, name))
  // }
  // const appendRootPathToPath = (path) => `${getRootPath(name)}.${path}`
  // if(typeof path === 'string'){
  //   wildcardPaths.push(appendRootPathToPath(path))
  // }
  // if(typeof path === 'array'){
  //   // paths
  //   wildcardPaths = wildcardPaths.concat(path.map(p => appendRootPathToPath(p)))
  // }

  // console.log(wildcardPaths)

  // return <ObjectInspector data={data} name={name} initialExpandedPaths={wildcardPaths}/>
};

Inspector.propTypes = {
  data: _react2.default.PropTypes.any.isRequired,
  name: _react2.default.PropTypes.string,
  level: _react2.default.PropTypes.number,
  path: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.array]),
  table: _react2.default.PropTypes.bool
};

exports.default = Inspector;