'use strict';

var _expect = require('expect');

var _expect2 = _interopRequireDefault(_expect);

var _pathUtils = require('./pathUtils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var root = _pathUtils.DEFAULT_ROOT_PATH;

describe('PathUtils', function () {
  beforeEach(function () {});

  it('isExpandable', function () {
    (0, _expect2.default)((0, _pathUtils.isExpandable)(undefined)).toBe(false);
    (0, _expect2.default)((0, _pathUtils.isExpandable)(null)).toBe(false);
    (0, _expect2.default)((0, _pathUtils.isExpandable)('hello')).toBe(false);

    (0, _expect2.default)((0, _pathUtils.isExpandable)([])).toBe(false);
    (0, _expect2.default)((0, _pathUtils.isExpandable)([0])).toBe(true);

    (0, _expect2.default)((0, _pathUtils.isExpandable)({})).toBe(false);
    (0, _expect2.default)((0, _pathUtils.isExpandable)({ k: 'v' })).toBe(true);
  });

  it('wildcardPathsFromLevel works', function () {
    (0, _expect2.default)((0, _pathUtils.wildcardPathsFromLevel)(-1)).toEqual(undefined);
    (0, _expect2.default)((0, _pathUtils.wildcardPathsFromLevel)(0)).toEqual([]);
    (0, _expect2.default)((0, _pathUtils.wildcardPathsFromLevel)(1)).toEqual([root]);
    (0, _expect2.default)((0, _pathUtils.wildcardPathsFromLevel)(2)).toEqual([root, root + '.*']);
    (0, _expect2.default)((0, _pathUtils.wildcardPathsFromLevel)(3)).toEqual([root, root + '.*', root + '.*.*']);
    (0, _expect2.default)((0, _pathUtils.wildcardPathsFromLevel)(4)).toEqual([root, root + '.*', root + '.*.*', root + '.*.*.*']);
  });

  it('pathsFromDataAndLevel: data: [null, undefined, []] ', function () {
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(null, 0)).toEqual([]);
    // TODO:
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(null, 1)).toEqual([]);
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(undefined, 0)).toEqual([]);
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)([], 0)).toEqual([]);
    // TODO:
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)([], 2)).toEqual([]);
  });

  it('pathsFromDataAndLevel: object', function () {
    var data = {
      "id": 2,
      "name": "An ice sculpture",
      // "price": 12.50,
      "tags": ["cold", "ice"],
      "dimensions": {
        "length": 7.0,
        "width": 12.0,
        "height": 9.5
      },
      "warehouseLocation": {
        "latitude": -78.75,
        "longitude": 20.4
      }
    };

    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 0)).toEqual([]);
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 1)).toEqual([root]);
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 2)).toEqual([root, root + '.tags', root + '.dimensions', root + '.warehouseLocation']);
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 3)).toEqual([root, root + '.tags', root + '.dimensions', root + '.warehouseLocation']);
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 4)).toEqual([root, root + '.tags', root + '.dimensions', root + '.warehouseLocation']);
  });

  it('pathsFromDataAndLevel: array', function () {
    var data = [0, 1, 2, 3, 4];

    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 0)).toEqual([]);
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 1)).toEqual([root]);
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 2)).toEqual([root]);
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 3)).toEqual([root]);
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 4)).toEqual([root]);
  });

  it('pathsFromDataAndLevel: null, undefined, empty object, empty array, boolean, number, function', function () {
    var data = null;

    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 0)).toEqual([]);
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 1)).toEqual([]);
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 2)).toEqual([]);
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 3)).toEqual([]);
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 4)).toEqual([]);

    data = undefined;
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 0)).toEqual([]);
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 1)).toEqual([]);
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 2)).toEqual([]);
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 3)).toEqual([]);
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 4)).toEqual([]);

    data = {}; // not showing __proto__
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 0)).toEqual([]);
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 1)).toEqual([]);
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 2)).toEqual([]);
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 3)).toEqual([]);
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 4)).toEqual([]);

    data = []; // length, __proto__
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 0)).toEqual([]);
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 1)).toEqual([]);
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 2)).toEqual([]);
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 3)).toEqual([]);
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 4)).toEqual([]);

    data = true;
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 0)).toEqual([]);
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 1)).toEqual([]);
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 2)).toEqual([]);
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 3)).toEqual([]);
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 4)).toEqual([]);

    data = 1;
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 0)).toEqual([]);
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 1)).toEqual([]);
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 2)).toEqual([]);
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 3)).toEqual([]);
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 4)).toEqual([]);

    data = function data() {};
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 0)).toEqual([]);
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 1)).toEqual([]);
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 2)).toEqual([]);
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 3)).toEqual([]);
    (0, _expect2.default)((0, _pathUtils.pathsFromDataAndLevel)(data, 4)).toEqual([]);
  });

  // it('pathsFromDataAndLevel: object, with custome names', () => {
  //   const data = {
  //       "id": 2,
  //       "name": "An ice sculpture",
  //       // "price": 12.50,
  //       "tags": ["cold", "ice"],
  //       "dimensions": {
  //           "length": 7.0,
  //           "width": 12.0,
  //           "height": 9.5
  //       },
  //       "warehouseLocation": {
  //           "latitude": -78.75,
  //           "longitude": 20.4
  //       }
  //   }
  //
  //   const customName = 'test'
  //   expect(pathsFromDataAndLevel(data, 0, customName)).toEqual([ ])
  //   expect(pathsFromDataAndLevel(data, 1, customName)).toEqual([ 'test' ])
  //   expect(pathsFromDataAndLevel(data, 2, customName)).toEqual([ 'test', 'test.tags', 'test.dimensions', 'test.warehouseLocation' ])
  //   expect(pathsFromDataAndLevel(data, 3, customName)).toEqual([ 'test', 'test.tags', 'test.dimensions', 'test.warehouseLocation' ])
  //   expect(pathsFromDataAndLevel(data, 4, customName)).toEqual([ 'test', 'test.tags', 'test.dimensions', 'test.warehouseLocation' ])
  // })
});