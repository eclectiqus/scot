'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _ObjectDescription = require('../object/ObjectDescription');

var _ObjectDescription2 = _interopRequireDefault(_ObjectDescription);

var _ObjectPreview = require('../object/ObjectPreview');

var _ObjectPreview2 = _interopRequireDefault(_ObjectPreview);

var _glyphs = require('../styles/glyphs');

var _pathUtils = require('./pathUtils');

var _objectStyles = require('../object/objectStyles');

var _objectStyles2 = _interopRequireDefault(_objectStyles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Styles


var styles = {
  base: {
    fontFamily: 'Menlo, monospace',
    fontSize: '11px',
    lineHeight: '14px',
    cursor: 'default'
  },
  propertyNodesBox: {
    paddingLeft: '12px'
  },
  property: {
    paddingTop: '2px'
  }
};

var InspectorBox = function InspectorBox(_ref) {
  var children = _ref.children;
  return _react2.default.createElement(
    'div',
    { style: styles.base },
    children
  );
};

// The view with or without expansion
var PreviewBox = function PreviewBox(_ref2) {
  var data = _ref2.data;
  var name = _ref2.name;
  var children = _ref2.children;
  var onClick = _ref2.onClick;
  return _react2.default.createElement(
    'span',
    { style: styles.property, onClick: onClick },
    children,
    _react2.default.createElement(_ObjectPreview2.default, { object: data, name: name })
  );
};

// a box with left padding containing the property nodes
var PropertyNodesBox = function PropertyNodesBox(_ref3) {
  var children = _ref3.children;
  return _react2.default.createElement(
    'div',
    { style: styles.propertyNodesBox },
    children
  );
};

var ObjectInspector = function (_Component) {
  _inherits(ObjectInspector, _Component);

  function ObjectInspector(props) {
    _classCallCheck(this, ObjectInspector);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ObjectInspector).call(this, props));

    if (props.depth === 0) {
      // root node
      _this.state = {
        expandedPaths: (0, _pathUtils.getPathsState)(props.expandLevel, props.expandPaths, props.data, props.name)
      };
    }
    return _this;
  }

  _createClass(ObjectInspector, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.depth === 0) {
        this.setState({
          expandedPaths: (0, _pathUtils.getPathsState)(nextProps.expandLevel, nextProps.expandPaths, nextProps.data, nextProps.name, this.state.expandedPaths)
        });
      }
    }
  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      if (typeof _react2.default.initializeTouchEvents === 'function') {
        _react2.default.initializeTouchEvents(true);
      }
    }
  }, {
    key: 'getExpanded',
    value: function getExpanded(path) {
      var expandedPaths = this.state.expandedPaths;
      if (expandedPaths !== undefined && typeof expandedPaths[path] !== 'undefined') {
        return expandedPaths[path];
      }
      return false;
    }
  }, {
    key: 'setExpanded',
    value: function setExpanded(path, expanded) {
      var expandedPaths = this.state.expandedPaths;
      expandedPaths[path] = expanded;
      this.setState({ expandedPaths: expandedPaths });
    }
  }, {
    key: 'handleClick',
    value: function handleClick() {
      // console.log(this.props.data);
      if ((0, _pathUtils.isExpandable)(this.props.data)) {
        if (this.props.depth > 0) {
          this.props.setExpanded(this.props.path, !this.props.getExpanded(this.props.path));
        } else {
          this.setExpanded(this.props.path, !this.getExpanded(this.props.path));
        }
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props;
      var data = _props.data;
      var name = _props.name;
      var path = this.props.path;


      var setExpanded = this.props.depth === 0 ? this.setExpanded.bind(this) : this.props.setExpanded;
      var getExpanded = this.props.depth === 0 ? this.getExpanded.bind(this) : this.props.getExpanded;

      var expanded = getExpanded(path);
      var expandGlyph = undefined;
      if ((0, _pathUtils.isExpandable)(data)) {
        expandGlyph = _react2.default.createElement(_glyphs.ExpandGlyph, { expanded: expanded });
      } else {
        // root node doesn't need placeholder
        if (this.props.depth === 0) {
          expandGlyph = _react2.default.createElement('span', null);
        } else {
          expandGlyph = _react2.default.createElement(_glyphs.ExpandGlyph, { empty: true });
        }
      }

      // if current node is expanded render the property nodes
      var propertyNodesBox = undefined;
      if (expanded) {
        var propertyNodes = [];
        for (var propertyName in data) {
          var propertyValue = data[propertyName];
          if (data.hasOwnProperty(propertyName)) {
            propertyNodes.push(_react2.default.createElement(ObjectInspector, { getExpanded: getExpanded,
              setExpanded: setExpanded,
              path: path + '.' + propertyName // TODO: escape '.' in propertyName
              , depth: this.props.depth + 1,
              key: propertyName,
              name: propertyName,
              data: propertyValue }));
          }
        }
        propertyNodesBox = _react2.default.createElement(
          PropertyNodesBox,
          null,
          propertyNodes
        );
      }

      return _react2.default.createElement(
        InspectorBox,
        null,
        _react2.default.createElement(
          PreviewBox,
          { data: data, name: name, onClick: this.handleClick.bind(this) },
          expandGlyph
        ),
        propertyNodesBox
      );
    }
  }]);

  return ObjectInspector;
}(_react.Component);

exports.default = ObjectInspector;


ObjectInspector.propTypes = {
  name: _react.PropTypes.string,
  data: _react.PropTypes.any,

  expandLevel: _react.PropTypes.number,
  expandPaths: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.array]),

  depth: _react.PropTypes.number.isRequired,
  path: _react.PropTypes.string // path is dot separated property names to reach the current node
};

ObjectInspector.defaultProps = {
  name: void 0,
  data: undefined,

  expandLevel: undefined,
  expandPaths: undefined,

  depth: 0,
  path: _pathUtils.DEFAULT_ROOT_PATH
};