'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _lodashOmit = require('lodash.omit');

var _lodashOmit2 = _interopRequireDefault(_lodashOmit);

var _lodashAssign = require('lodash.assign');

var _lodashAssign2 = _interopRequireDefault(_lodashAssign);

var _browserCookieLite = require('browser-cookie-lite');

var _styleUtils = require('./styleUtils');

var _styleUtils2 = _interopRequireDefault(_styleUtils);

var propTypes = {
  message: _react2['default'].PropTypes.string,
  onAccept: _react2['default'].PropTypes.func,
  link: _react2['default'].PropTypes.shape({
    msg: _react2['default'].PropTypes.string,
    url: _react2['default'].PropTypes.string.isRequired
  }),
  buttonMessage: _react2['default'].PropTypes.string,
  cookie: _react2['default'].PropTypes.string,
  dismissOnScroll: _react2['default'].PropTypes.bool,
  dismissOnScrollThreshold: _react2['default'].PropTypes.number,
  closeIcon: _react2['default'].PropTypes.string,
  disableStyle: _react2['default'].PropTypes.bool,
  styles: _react2['default'].PropTypes.object,
  children: _react2['default'].PropTypes.element,
  className: _react2['default'].PropTypes.string
};

exports['default'] = _react2['default'].createClass({

  displayName: 'CookieBanner',

  propTypes: propTypes,

  getDefaultProps: function getDefaultProps() {
    return {
      onAccept: function onAccept() {},
      dismissOnScroll: true,
      cookie: 'accepts-cookies',
      buttonMessage: 'Got it',
      dismissOnScrollThreshold: 0,
      styles: {}
    };
  },

  getInitialState: function getInitialState() {
    return {
      listeningScroll: false
    };
  },

  componentDidMount: function componentDidMount() {
    this.addOnScrollListener();
  },

  addOnScrollListener: function addOnScrollListener(props) {
    props = props || this.props;
    if (!this.state.listeningScroll && !this.hasAcceptedCookies() && props.dismissOnScroll) {
      if (window.attachEvent) {
        //Internet Explorer
        window.attachEvent('onmousewheel', this.onScroll);
      } else if (window.addEventListener) {
        window.addEventListener('mousewheel', this.onScroll, false);
      }
      this.setState({ listeningScroll: true });
    }
  },

  removeOnScrollListener: function removeOnScrollListener() {
    if (this.state.listeningScroll) {
      if (window.detachEvent) {
        //Internet Explorer
        window.detachEvent('onmousewheel', this.onScroll);
      } else if (window.removeEventListener) {
        window.removeEventListener('mousewheel', this.onScroll, false);
      }
      this.setState({ listeningScroll: false });
    }
  },

  onScroll: function onScroll() {
    // tacit agreement buahaha! (evil laugh)
    if (window.pageYOffset > this.props.dismissOnScrollThreshold) {
      this.onAccept();
    }
  },

  onAccept: function onAccept() {
    var _props = this.props;
    var cookie = _props.cookie;
    var onAccept = _props.onAccept;

    _browserCookieLite.cookie(cookie, true, 60 * 60 * 24 * 365);
    onAccept({ cookie: cookie });
    this.removeOnScrollListener();
  },

  getStyle: function getStyle(style) {
    var _props2 = this.props;
    var disableStyle = _props2.disableStyle;
    var styles = _props2.styles;

    if (!disableStyle) {
      // apply custom styles if available
      return _lodashAssign2['default']({}, _styleUtils2['default'].getStyle(style), styles[style]);
    }
  },

  getCloseButton: function getCloseButton() {
    var _props3 = this.props;
    var closeIcon = _props3.closeIcon;
    var buttonMessage = _props3.buttonMessage;

    if (closeIcon) {
      return _react2['default'].createElement('i', { className: closeIcon, onClick: this.onAccept, style: this.getStyle('icon') });
    }
    return _react2['default'].createElement(
      'div',
      { className: 'button-close', onClick: this.onAccept, style: this.getStyle('button') },
      buttonMessage
    );
  },

  getLink: function getLink() {
    var link = this.props.link;

    if (link) {
      return _react2['default'].createElement(
        'a',
        {
          href: link.url,
          className: 'cookie-link',
          style: this.getStyle('link') },
        link.msg || 'Learn more'
      );
    }
  },

  getBanner: function getBanner() {
    var _props4 = this.props;
    var children = _props4.children;
    var className = _props4.className;
    var message = _props4.message;

    if (children) {
      return children;
    }

    var props = _lodashOmit2['default'](this.props, Object.keys(propTypes));
    return _react2['default'].createElement(
      'div',
      _extends({}, props, { className: _classnames2['default']('react-cookie-banner', className), style: this.getStyle('banner') }),
      _react2['default'].createElement(
        'span',
        { className: 'cookie-message', style: this.getStyle('message') },
        message,
        this.getLink()
      ),
      this.getCloseButton()
    );
  },

  hasAcceptedCookies: function hasAcceptedCookies() {
    return typeof window !== 'undefined' && _browserCookieLite.cookie(this.props.cookie);
  },

  render: function render() {
    return this.hasAcceptedCookies() ? null : this.getBanner();
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (nextProps.dismissOnScroll) {
      this.addOnScrollListener(nextProps);
    } else {
      this.removeOnScrollListener();
    }
  },

  componentWillUnmount: function componentWillUnmount() {
    this.removeOnScrollListener();
  }

});
module.exports = exports['default'];