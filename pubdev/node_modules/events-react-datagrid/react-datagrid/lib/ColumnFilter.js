'use strict';

var React      = require('react');
var assign     = require('object-assign');
var ReactMenu  = require('react-menus');
var moment     = require('moment');
var DateRangePicker  = require('react-daterange-picker')
var ReactTags = require('react-tag-input').WithContext
var getColumn;
var start;
var end;
var filtervalues = {}
function stopPropagation(event) {
    event.stopPropagation();
}

function emptyFn() {}

var FILTER_FIELDS = {};

module.exports = {

    getColumnFilterFieldFactory: function getColumnFilterFieldFactory(column) {

        var type = column.type || 'string';

        return FILTER_FIELDS[type] || React.DOM.input;
    },
    getInitialState: function(){

	return{start_epoch:'', end_epoch:'',tags:[], 
	       suggestions:["panana","pango","Pear","ppricot, p, p, pop, popd, pd"]};

    },
    handleDelete: function(i) {
	var tags = this.state.tags;
	    tags.splice(i,1)
	    this.setState({tags:tags})
    },
    handleAddition: function(tag){
	var tags = this.state.tags;
	  tags.push({
		id: tags.length +1,
		text: tag
     });
	this.setState({tags:tags})
    },
    handleDrag: function(tag, currPos, newPos){
	var tags = this.state.tags;
	tags.splice(currPos, 1);
	tags.splice(newPos,0,tag)
	this.setState({tags: tags})
    },
    getTags:  function(){        	
	var array = []
	var values;
	if(getColumn == "Sources"){
	    this.state.tags = this.state.sourcetags
	}
	for(var i = 0; i<this.state.tags.length; i++){
	array.push(this.state.tags[i].text)
	}
	values = array.join(',');
	values = values.replace("+", "");
	filtervalues[getColumn.toLowerCase()] = values.split(',')
	this.filterBy(getColumn)        	


    },
    getFilterField: function getFilterField(props) {
        var column = props.column;
        var filterValue = filtervalues ? filtervalues[column.name] : '';
	    var fieldProps = {
            autoFocus: true,
            defaultValue: filterValue,
            column: column,
            onChange: this.onFilterChange.bind(this, column),
            onKeyUp: this.onFilterKeyUp.bind(this, column)
        };

        var fieldFactory = column.renderFilterField || this.props.renderFilterField;
        var field;

        if (fieldFactory) {
            field = fieldFactory(fieldProps);
        }

        if (field === undefined) {
            field = this.getColumnFilterFieldFactory(column)(fieldProps);
        }

        return field;
    },

    onFilterKeyUp: function onFilterKeyUp(column, event) {
        if (event.key == 'Enter') {
            this.onFilterClick(column, event);
        }
    },

    onFilterChange: function onFilterChange(column, eventOrValue) {

        var value = eventOrValue;

        if (eventOrValue && eventOrValue.target) {
            value = eventOrValue.target.value;
        }

        this.filterValues = this.filterValues || {};
        this.filterValues[column.name] = value;

        if (this.props.liveFilter) {
            this.filterBy(column, value);
        }
    },

    filterBy: function filterBy(column, value, event) {
	if(column == "Created" || column == "Occurred" || column == "Reported" || column == "Discovered" || column == "Updated"){

	filtervalues = filtervalues
	$.extend(true,filtervalues, filtervalues)
	}
	else if(column == "Sources" || column == "Tags"){
        filtervalues = filtervalues
	$.extend(true,filtervalues,filtervalues)

        }
	else{
		filtervalues[column.toLowerCase()] = value;
		$.extend(true,filtervalues,filtervalues)
	}

	  ;(this.props.onFilter || emptyFn)(column, filtervalues, filtervalues, event);
	  this.reload()
    },

    onFilterClick: function onFilterClick(column, event) {
        this.showMenu(null);

        var value = this.filterValues ? this.filterValues[column.name] : '';

        this.filterBy(column['title'], value, event);
    },

    onFilterClear: function onFilterClear(column) {
        this.showMenu(null);

       filtervalues[column.name] = '';

	this.setState({start_epoch: " ",end_epoch: " "})

        this.filterBy(column['title'], '');(this.props.onClearFilter || emptyFn).apply(null, arguments);
    },

   handleSelect: function(range, pick){

	start = range['start']
        var month = start['_i'].getMonth()+1
	var day   = start['_i'].getDate()
	var StartDate = month+"/"+day+"/"+start['_i'].getFullYear()
        end = range['end']
        var month = end['_i'].getMonth()+1
	var day   = end['_i'].getDate()
	var EndDate = month+"/"+day+"/"+end['_i'].getFullYear()

	start = StartDate.split('/')
	start = new Date(start[2], start[0] - 1, start[1])
	end   = EndDate.split('/')
	end   = new Date(end[2],end[0]-1, end[1], 23,59,59,99);

	start = Math.round(start.getTime()/1000)
	end   = Math.round(end.getTime()/1000)
	filtervalues[getColumn.toLowerCase()] = { begin:start, end: end}
	this.setState({start_epoch: StartDate,end_epoch: EndDate})
	},
    applyDates: function(column){
	if($('.StartDate').val() == "" || $('.EndDate').val() == "")
	{
		alert("Please Select Dates")
	}
	else{

            this.showMenu(null);	
	    this.filterBy(getColumn);  
 
           }
	},

    getFilterButtons: function getFilterButtons(props) {

        var column = props.column;
	
        var factory = column.renderFilterButtons || this.props.renderFilterButtons;

        var result;

        if (factory) {
            result = factory(props);
        }

        if (result !== undefined) {
            return result;
        }

        var doFilter = this.onFilterClick.bind(this, column);
        var doClear = this.onFilterClear.bind(this, column);
	if(column['title'] == "Created"|| column['title'] == "Occurred" || column['title'] == "Reported" || column['title'] == "Discovered" || column['title'] == "Updated"){
	getColumn = column['title']
        return (React.createElement("div", {className: "all"}, 
	React.createElement(DateRangePicker, {numberOfCalendars: 2, selectionType:"range", showLegend: true, onSelect:this.handleSelect ,singleDateRange: true}),
	React.createElement("div",{className: 'dates'}, React.createElement('input', {className: "StartDate",placeholder: 'Start Date', value: this.state.start_epoch, readOnly:true}), React.createElement('input', {className: "EndDate",placeholder:'End Date', value: this.state.end_epoch, readOnly:true}), React.createElement('button',{onClick: doClear}, "Clear"), React.createElement('button',{onClick: this.applyDates},"Apply")))
	);
	}
	else if(column['title'] == "Sources" || column['title'] == "Tags"){
	   getColumn = column['title']
           return (
		React.createElement("div", {className: "tags"},
		React.createElement(ReactTags, {minQueryLength:1,tags: this.state.tags, suggestions: this.state.suggestions, 
		handleDelete: this.handleDelete, handleAddition: this.handleAddition, handleDrag: this.handleDrag}),
		React.createElement("div", {className:"viewtags"}, React.createElement('button',{onClick: this.getTags},
		"Apply"),React.createElement('button',{onClick: doClear}, "Clear"))
	     )
	   )
	}
	else{
	     return React.createElement(
		'div',
		{ style: {textAlign: 'center' }},
		   React.createElement('button', {onClick: doFilter}, 'Filter'), 
		   React.createElement('button', {onClick: doClear}, 'Clear')	
	      );	

	}
    },
    handleChange: function(value){
	this.setState({})
	},
	
   filterMenuFactory: function filterMenuFactory(props) {
        var overStyle = {
            background: 'white',
            color: 'auto'
        };

        var column = props.column;

        var field = this.getFilterField(props);
        var buttons = this.getFilterButtons({
            column: column
        });
	if(column['title'] == "Occurred" || column['title'] == "Reported" || column['title'] == "Discovered" || column['title'] == "Updated" || column['title'] == "Created" || column['title'] == "Tags" || column['title'] == "Sources"){
		field = null;
	}
        var children = [field, buttons].map(function (x, index) {
            return React.createElement(
                ReactMenu.Item,
                { key: index },
                React.createElement(
                    ReactMenu.Item.Cell,
                    null,
                    x
                )
            );
        });
	
        props.itemOverStyle = props.itemOverStyle || overStyle;
        props.itemActiveStyle = props.itemActiveStyle || overStyle;
        props.onClick = props.onClick || stopPropagation;

        var factory = this.props.filterMenuFactory;
        var result;

        if (factory) {
            result = factory(props);

            if (result !== undefined) {
                return result;
            }
        }

        props.onMount = this.onFilterMenuMount;

        return React.createElement(
            ReactMenu,
            props,
            children
        );

      
    },

    onFilterMenuMount: function onFilterMenuMount(menu) {
        var dom = menu.getDOMNode();

        if (dom) {
            var input = dom.querySelector('input');

            if (input) {
                setTimeout(function () {
                    input.focus();
                }, 10);
            }
        }
    }
};


