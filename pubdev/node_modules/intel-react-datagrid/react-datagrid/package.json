{
  "name": "react-datagrid",
  "version": "1.2.15",
  "description": "React DataGrid",
  "main": "lib/index.js",
  "scripts": {
    "test": "mocha --recursive --reporter spec --require should",
    "test-w": "mocha --recursive --reporter spec --require should --watch",
    "lib": "gulp",
    "build-style": "webpack --progress --colors --config build/build-style.config.js",
    "build-style-dist": "webpack --progress --colors --config build/build-style-dist.config.js",
    "build-style-dist-min": "webpack --progress --colors --config build/build-style-dist-min.config.js",
    "stats": "webpack --profile --progress --colors --config build/dist.config.js --json > stats.json",
    "dist": "webpack --progress --colors --config build/dist.config.js",
    "watch-dist": "webpack --watch --progress --colors --config build/dist.config.js",
    "dist.min": "webpack --progress --colors -p --config build/dist.min.config.js",
    "build": "NODE_ENV=production npm run lib && npm run dist && npm run dist.min && npm run build-style && npm run build-style-dist && npm run build-style-dist-min",
    "dev": "NODE_ENV=production PORT=9090 webpack-dev-server --progress --colors --config  build/dev.config.js",
    "hot": "NODE_ENV=production HOT=true PORT=9090 webpack-dev-server --progress --colors --config build/dev.config.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/zippyui/react-datagrid.git"
  },
  "keywords": [
    "grid",
    "datagrid",
    "data-grid",
    "grid",
    "widget",
    "table",
    "list",
    "react-component",
    "react",
    "grid"
  ],
  "devDependencies": {
    "babel-core": "^5.1.13",
    "babel-loader": "^5.0.0",
    "css-loader": "^0.9.0",
    "exports-loader": "^0.6.2",
    "extract-text-webpack-plugin": "^0.3.8",
    "faker": "^2.1.2",
    "file-loader": "^0.8.1",
    "guid": "0.0.12",
    "gulp": "^3.8.11",
    "gulp-babel": "^5.1.0",
    "gulp-react": "^3.0.0",
    "jsdom": "5.1.0",
    "json-loader": "^0.5.2",
    "mocha": "^2.2.1",
    "node-libs-browser": "^0.5.2",
    "parse-keys": "^1.3.0",
    "raw-loader": "^0.5.1",
    "react-hot-loader": "^1.2.7",
    "should": "^6.0.1",
    "sorty": "^1.2.0",
    "style-loader": "^0.8.2",
    "stylus-loader": "^0.4.0",
    "webpack": "^1.9.12",
    "webpack-dev-server": "^1.9.0"
  },
  "dependencies": {
    "clone": "^0.1.18",
    "css-utils": "^0.4.2",
    "drag-helper": "^1.2.3",
    "es6-promise": "^2.1.1",
    "hasown": "^1.0.1",
    "normalize.css": "^3.0.3",
    "object-assign": "^2.0.0",
    "react-load-mask": "^1.0.1",
    "react-menus": "^1.1.1",
    "react-simple-toolbar": "^1.0.5",
    "react-style-normalizer": "^1.2.8",
    "react-virtual-scroller": "^1.1.2",
    "region": "^2.1.2",
    "region-align": "^2.1.2",
    "ustring": "^1.4.1",
    "whatwg-fetch": "^0.7.0"
  },
  "peerDependencies": {
    "react": ">=0.13.0"
  },
  "author": {
    "name": "ZippyUI",
    "email": "contact@zippyui.com"
  },
  "contributors": [],
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/zippyui/react-datagrid/issues"
  },
  "homepage": "https://github.com/zippyui/react-datagrid",
  "readme": "react-datagrid\n=================\n\n[![Join the chat at https://gitter.im/zippyui/react-datagrid](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/zippyui/react-datagrid?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Build Status](https://circleci.com/gh/zippyui/react-datagrid.svg?style=shield)](https://circleci.com/gh/zippyui/react-datagrid)\n\n> A carefully crafted DataGrid for React\n\nSee demo at [zippyui.github.io/react-datagrid](http://zippyui.github.io/react-datagrid)\n\n<a href=\"http://zippyui.github.io/react-datagrid/#/examples/basic\"><img src=\"./react-datagrid.png\" height=\"400\" width=\"739\" /></a>\n\n## Install\n\n```sh\n$ npm install react-datagrid --save\n```\n\n## Changelog\n\nSee [changelog](./CHANGELOG.md)\n\n## Roadmap\n\nSee [roadmap](./ROADMAP.md)\n\n## Features\n\n * renders huge amounts of data\n * resizable columns\n * reorderable columns\n * remote data support\n * custom row/cell/column rendering\n * multiple/single selection\n * sorting\n * filtering\n * pagination\n * hideable columns\n * works on mobile\n\n## Usage\n\nPlease include the stylesheet `index.css` in your project. If you are using `webpack` with `css-loader`, you can require it: `require('react-datagrid/index.css')`\n\n#### NOTE:\nFor optimal performance, make sure you use `react-datagrid` with the **production version of React**, not the `dev` version. The `dev` version contains a lot of checks, which slow down grid scrolling/rendering quite a bit.\n\nOf course for development, you can use React `dev` version, but this is just a warning so you won't be put off if you see some jank in `dev` mode. It will dissapear when you switch to `production` (minified) version. We are working on this, to make the datagrid usage experience as optimal as possible even in development.\n\n#### Example\n```jsx\n\nvar React = require('react')\nvar DataGrid = require('react-datagrid')\n\nvar data = [\n  { id: '1', firstName: 'John', lastName: 'Bobson'},\n  { id: '2', firstName: 'Bob', lastName: 'Mclaren'}\n]\nvar columns = [\n  { name: 'firstName'},\n  { name: 'lastName'}\n]\n\n<DataGrid idProperty=\"id\" dataSource={data} columns={columns} />\n\n```\n\nFor more examples, see [examples site](http://zippyui.github.io/react-datagrid/#/examples/basic)\n\n## Props\n\nThere are a lot of props that can be configured for the datagrid. We'll try to categorize them so they are easy to follow\n\n#### Basic\n\n * `dataSource`: Array/String/Function/Promise - for local data, an array of object to render in the grid. For remote data, a string url, or a function that returns a promise.\n * `idProperty`: String - the name of the property where the id is found for each object in the data array\n * `columns`: Array - an array of columns that are going to be rendered in the grid\n\n  Each column should have a `name` property, and optionally a `title` property. If no `title` property is specified, a humanized version of the column `name` will be used.\n\n  * `name`: String\n  * `title`: String/ReactElement - a title to show in the header. If not specified, a humanized version of `name` will be used. Can be a string or anything that React can render, so you can customize it as you please.\n  * `render`: Function - if you want custom rendering, specify this property\n\n    ```jsx\n    var columns = [\n      { name: 'index', render: function(v){return 'Index ' + v} }\n    ]\n    ```\n\n  * `style`: Object - if you want cells in this column to be have a custom style\n  * `textAlign`: String - one of 'left', 'right', 'center'\n\n#### Sorting\n\nSorting the data array is not done by the grid. You can however pass in sort info so the grid renders with sorting icons as needed\n\n * onSortChange: Function(sortInfo)\n * sortInfo: Array - an array with sorting information\n\n  Example\n  ```jsx\n  var sortInfo = [{name: 'firstName', dir: 'asc'}]\n  var sorty = require('sorty')\n  //sorty is a package which sorts an array on multiple properties\n\n  function sort(arr){\n    return sorty(sortInfo, arr)\n  }\n\n  function onSortChange(info){\n    sortInfo = info\n    data = sort(data)\n    //now refresh the grid\n  }\n\n  var data = [...]\n\n  data = sort(data)\n  <DataGrid\n    sortInfo={sortInfo}\n    onSortChange={onSortChange}\n    dataSource={data} idProperty='id' columns={columns} />\n  ```\n\n#### Columns\n\n##### Column styling\n\nColumn customization/styling can be done with different properties on the column object:\n\n* `style`: Object - a style object to be applied to all cells in this column\n* `textAlign`: String - one of 'left', 'right', 'center'\n* `className`: String - a className to be applied to all cells in this column.\n* `render`: Function(value, data, cellProps) - if you want custom rendering, specify this property\n\n```jsx\n  var columns = [\n    { name: 'index', render: function(v){return 'Index ' + v} }\n  ]\n```\n\nThe `column.render` function is called with 3 args:\n\n* value - the default value to be rendered (equals to `data[column.name]`)\n* data - the corresponding data object for the current row\n* cellProps - an object with props for the current cell - has the following properties:\n  * rowIndex - the index of the row\n  * index    - the index of the column\n  * style    - a style for the cell\n  * className - a className for the cell\n\nExample:\n\n```jsx\nvar data = [...]\nvar columns = [\n  {\n    name: 'firstName',\n    className: 'first-column',\n    textAlign: 'center',\n    style: { fontWeight: 'bold' }\n  },\n  {\n    name: 'lastName',\n    render: function(value){\n      return <span>\n        <b>Last name:</b> value\n      </span>\n    }\n]\n<DataGrid idProperty=\"id\" dataSource={data} columns={columns} />\n```\n\n##### Column showing/hiding\n\nWhen a column is shown/hidden, you can be notified using the `onColumnVisibilityChange` callback prop.\n\n * `onColumnVisibilityChange`: Function(column, visibility)\n\nYou can specify a column is visible/hidden with the following props on column objects:\n\n * defaultVisible: Boolean\n * visible: Boolean - controlled (which means you have to manually set column visibility when it changes, by using `onColumnVisibilityChange`)\n\nIf you prefer to use the \"hidden\" alternatives, you can use `defaultHidden` and `hidden`.\n\n#####  Column reordering\n\nIf you want to enable column reordering, just specify the `onColumnOrderChange` prop on the grid:\n\n* onColumnOrderChange: Function(index, dropIndex)\n\n  Example\n  ```jsx\n  function handleColumnOrderChange(index, dropIndex){\n    var col = columns[index]\n    columns.splice(index, 1) //delete from index, 1 item\n    columns.splice(dropIndex, 0, col)\n    this.setState({})\n  }\n\n  <DataGrid onColumnOrderChange={handleColumnOrderChange} />\n  ```\n\n### Rows\n\n#### Styling\n\n * `rowStyle`: Object/Function - you can specify either a style object to be applied to all rows, or a function. The function is called with `(data, props)` (so you have access to `props.index` for example) and is expected to return a style object.\n\n * `rowProps`: Object - props to be passed to all rows\n    - `rowProps.overClassName` - a css class name to be applied when mouse is over the row\n    - `rowProps.selectedClassName`\n    - `rowProps.className`\n\n * `rowFactory`: Function - a factory function for rows. It can return `undefined` if you only want to change the `props` object passed to the function and rely on the default rendering.\n\n\n#### Remote data\n\n * dataSource: String/Function/Promise if you specify a url to load remote data from, by default, pagination props are appended to the url as query params (pageSize, skip).\n\nFor an example, see [examples/restore-grid-state](http://zippyui.github.io/react-datagrid#/examples/restore-grid-state)\n\n#### Pagination\n\n When you have remote data, pagination is setup by default. If you want to disable pagination, specify the `pagination` prop with a `false` value.\n\n * pagination: Boolean\n * defaultPageSize: Number\n * pageSize: Number - controlled alternative for `defaultPageSize`. When `pageSize` changes, `onPageSizeChange(pageSize)` is called\n * defaultPage: Number\n * page: Number - controlled alternative for `defaultPage`. When `page` changes, `onPageChange(page)` is called\n\n\n\n## Contributing\n\nUse [Github issues](https://github.com/zippyui/react-datagrid/issues) for feature requests and bug reports.\n\nWe actively welcome pull requests.\n\nFor setting up & starting the project locally, use:\n\n```sh\n$ git clone https://github.com/zippyui/react-datagrid\n$ cd react-datagrid\n$ npm install\n$ npm run dev # or npm run hot\n```\n\nNow navigate to [localhost:9090](http://localhost:9090/)\n\nIf you want to have `react-hot-loader` enabled, and see code changes pushed instantly, without losing page state, use `npm run hot` instead of `npm run dev`.\n\nBefore building a new version, make sure you run\n\n```sh\n$ npm run build\n```\nwhich compiles the `src` folder (which contains jsx files) into the `lib` folder (only valid EcmaScript 5 files).\n\n## License\n\n#### MIT\n",
  "readmeFilename": "README.md",
  "_id": "react-datagrid@1.2.15",
  "dist": {
    "shasum": "1b122f4b558591153f7721cf1e2791d1964bea9e"
  },
  "_from": "react-datagrid@",
  "_resolved": "http://registry.npmjs.org/react-datagrid/-/react-datagrid-1.2.15.tgz"
}
